/////////////////////////////////////////////
//////                                 //////
//             Sudoku Solver               //
//                                         //
//           -= Version 1.14 =-            //
//                                         //
// --------------------------------------- //
//                                         //
//           *Instructions*                //
//                                         //
//  + Fill out account setup               //
//  + Start east of Ali                    //
//  + Run the script                       //
//                                         //
/////////////////////////////////////////////
program SudokuSolver;                      //
{$DEFINE SMART}                            //
{$I SRL-OSR/SRL.SIMBA}                         //
Const                                      //
/////////////////////////////////////////////
//===========================================
//===== Account Setup =======================

  Ver = 'V2.01';
                            // Large: Need ~2M/hr to run
  PuzzleSize = 'Large';     // Small: Need ~100k/hr to run
  AccountLogin = 'leladkrupa9746@yahoo.com';        // Runescape Account Login
  AccountPassword = 'NfrgR0WQD';     // Runescape Account Password
  AccountPIN = '';          // Runescape Bank Pin
  DebugMode = True;        // Debug script ?
  Reposition = False;       // Attempt to reposition to find Ali?
  S_MouseSpeed = 100;       // SRL's MouseSpeed
  S_World = [353];             // World you would like to be logged into

  MouseWait = 1; // Wait between moving mouse and clicking; and after clicking
  //  Optimal Values:
  //  - 1:  Incredibly Fast
  //  - 75: Human-like

  W1 = 1;        // Wait between placing each rune on the puzzle
  //  Optimal Values:
  //  - 5:  Incredibly Fast
  //  - 50: Human-like

  W2 = 1;       // Wait between picking each rune to place
  //  Optimal Values:
  //  - 50:  Incredibly Fast
  //  - 1000: Human-like

  Multi = 1.05;   // (Multiplier for random wait times)
  //  Wait(RandomRange(W1, Round(Multi * W1)));
  //  1.2: The lowest you should go
  //  2.0: The highest you should go

//===== Account Setup =======================
//===========================================

//===========================================
//===== Don't Edit Any Further ==============
//===========================================

Procedure DeclarePlayers;
begin
  NumberOfPlayers(1);
  CurrentPlayer := 0;
  With Players[0] Do
  Begin
    Name        := AccountLogin;
    Pass        := AccountPassword;
    PIN         := AccountPIN;
    Active      := True;
    Member      := True;
  End;
  SRL_DisableIPLog := True;
end;

Var
  TimeToBreak, StartTime: Integer;
  S_TR: Extended;

  F_Count: Integer;
  F_String: String;
  Solved, InitlizedRuneBMPs: Boolean;

  Puzzle: Array of Array of Integer;
  PuzzleSizeS: String;
  PossibleValues: Array of Array of Array of Integer;
  PuzzlesSolved: Integer;
  BoxDistX, BoxDistY, sBoxDistX, sBoxDistY: Integer;
  PuzzleX1, PuzzleY1, sPuzzleX1, sPuzzleY1: Integer;
  smallOrder: Array of TIntegerArray;

  Runes, ShopRunes: Array of String;
  RunesBMP, ShopRunesBMP: Array of Integer;

Const
  C_YELLOWBLOCK = 114921;
  C_ORANGEBLOCK = 498170;
  Q_STORE_BUY = 10; // Quantity runes buy from store per

  RUNES_LARGE = ['Mind', 'Fire', 'Air', 'Water', 'Earth', 'Body', 'Death', 'Chaos', 'Law'];  // This is ordered from place runes !
  RUNES_SMALL = ['Earth', 'Water', 'Air', 'Fire'];
  SHOP_RUNES_LARGE = ['Nature', 'Cosmic', 'Death'];
  SHOP_RUNES_SMALL = ['Earth', 'Water', 'Air', 'Fire'];

  DTM_CACTUS = 'm6wAAAHic42ZgYChiYmDwAeJgIPYC4hAgzgLidCCeBcTLgLgBiBOAOBqovhqI' +
               'm6AYxK4C4mIg9gViCyCuA+I+IJ7RksIQ6qIKxj8+fgHj8PBQBkcHRwavPGMU/' +
               'B+oXoRIzAjEzERiJAAAjREZog==';
//==============================================================================
//===== Main.simba Include =====================================================
//==============================================================================
Procedure Wat(WAIT1, WAIT2: Integer);
Begin
  Wait(RandomRange(WAIT1, WAIT2));
End;

Procedure MMose(X, Y, Xr, Yr: Integer);
Begin
  MMouse(X + RandomRange(-Xr, Xr), Y + RandomRange(-Yr, Yr), 0, 0);
End;

Procedure Mose(X, Y, Xr, Yr: Integer; Button: Variant);
var
  B, C: Integer;
  iButton: Integer;
Begin
  MMose(X, Y, Xr, Yr);
  Wat(MouseWait, Round(MouseWait * 1.5));
  if (varType(button) = varBoolean) then
  begin
    if (button) then
      iButton := mouse_left
    else
      iButton := mouse_right;
  end else
    iButton := button;
  if (iButton = mouse_move) then Exit; { we aren't actually clicking! }
  GetMousePos(B, C);
  HoldMouse(B, C, iButton);
  Wat(75, 100);
  GetMousePos(B, C);
  ReleaseMouse(B, C, iButton);
  Wat(MouseWait, Round(MouseWait * 1.5));
End;

Function DoCondition(TimeOut, WaitPer: Integer; Funct: Function: Boolean; Condition: Function: Boolean; Normal: Boolean): Boolean;
Var
  T: Integer;
Begin
  T := GetSystemTime + TimeOut;
  If Normal Then
  Begin
    Repeat
      Funct();
      If (not Condition()) Then Wait(RandomRange(WaitPer, Round(WaitPer * 1.5)));
      If (GetSystemTime > T) Then Exit;
    Until(Condition())
  End Else Begin
    Repeat
      Funct();
      If Condition() Then Wait(RandomRange(WaitPer, Round(WaitPer * 1.5)));
      If (GetSystemTime > T) Then Exit;
    Until(Not Condition())
  End;
  Result := True;
End;

procedure Debug(Message: String);
begin
  if DebugMode then Writeln(Message);
end;

function StoreScreen: Boolean;
var
  X, Y: Integer;
begin
  Result := FindText(x, y, 'store', upChars07, 92, 25, 396, 54);
end;

Function CloseStore: Boolean;
Var
T: Integer;
StoreX: TPoint;
Begin
  If StoreScreen Then
  Begin
    T := GetSystemTime + RandomRange(1500, 2500);
    Mose(485, 40, 2, 2, True);
    Repeat
      Wat(50, 100);
      If (GetSystemTime > T) Then Exit;
    Until Not StoreScreen;
  End;

  Result := True;
End;

Function StoreQuantity(P: TPoint) : Integer;
var
T2DPA: T2DPointArray;
TPA: TPointArray;
B: TBox;
begin
  if (FindColorsTolerance(TPA, clYellow, MSX1 , Min(MSY1, P.Y - 50), MSX2, P.Y, 10)) then
  begin
    T2DPA := ClusterTPA(TPA, 3);
    SortATPAFromMidPoint(T2DPA, P);
    TPA := T2DPA[Low(T2DPA)];
    B := GetTPABounds(TPA);
    Result := StrToInt(GetTextAtEx(B.X1 - 1, B.Y1 - 1, B.X2 + 1, B.Y2 + 1, 0, 3, 15, clYellow, 10, StatChars07));
  end;
end;

Function LogMeOut: Boolean;
var
  t: integer;
begin
  result := not loggedin;
  if result then
    exit;
  if not gametab(tab_logout) then
    exit;

  mousebox(578,408,705,427,mouse_left);
  marktime(t);
  repeat
    wait(RandomRange(400,500));
    if timefrommark(t)>5000 then
      exit;
  until not loggedin;
  result := true;
End;

Function LoginScreen(): Boolean;
var
Boxes: TBox;
TPA: TPointArray;
Begin
  Boxes:= IntToBox(UBX1, UBY1, UBX2, UBY2);
  Result := FindColors(TPA, LOGIN_TEXTCOLOUR, Boxes.X1, Boxes.Y1, Boxes.X2, Boxes.Y2);
End;

Function LobbyLogin(): Boolean;
var
i: Integer;
Begin
  if LobbyScreen then
  begin
    Debug('LobbyScreen shows to LobbyLogin ...');
    MouseBox(WDx1, WDy1, WDx2, WDy2, mouse_Left); //Click To Play
    i := 0;
    repeat
      i := i+1;
      Wait(100 + Random(100));
    until (LoggedIn) or (i > 30);
  end;
  Result := True;
End;

function LoggedIn: Boolean; override;
begin
  //White text on Report Abuse Button
  Result := (GetColor(445, 489) = 16777215);
end;

function RandomWorld(Members: Boolean; PVP: Boolean = False): Integer; overload;
Const
  PVPW = [325, 337];
  FreeW = [301, 308, 316, 326, 335, 381, 382, 383, 384, 385, 393, 394];
  MembW = [302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317,
            318, 319, 320, 321, 322, 327, 328, 329, 330, 333, 334, 336,
            338, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353,
            354, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369,
            370, 373, 374, 375, 376, 377, 378, 386];
var
  Worlds: TIntegerArray;
begin
  If Members then
    Worlds := MembW
  else
    Worlds := FreeW;
  If (Members) and (PVP) then
    Worlds := CombineIntArray(PVPW, MembW);

  Result := Worlds[Random(Length(Worlds))];
end;

function SelectWorld(World: Integer): Boolean; override;
const
  Worlds: TIntegerArray = [301, 321, 345, 369,
                           302, 322, 346, 370,
                           303, 325, 349, 373,
                           304, 326, 350, 374,
                           305, 327, 351, 375,
                           306, 328, 352, 376,
                           308, 329, 353, 377,
                           309, 330, 354, 378,
                           310, 333, 357, 381,
                           311, 334, 358, 382,
                           312, 335, 359, 383,
                           313, 336, 360, 384,
                           314, 337, 361, 385,
                           316, 338, 362, 386,
                           317, 341, 365, 393,
                           318, 342, 366, 394,
                           319, 343, 367, -1,
                           320, 344, 368, -1];
var
  I, T: Integer;
  TB: TBox;
begin
  if (not InIntArrayEx(Worlds, I, World)) or (Not WorldScreen) then
    Exit(False);
  Wait(RandomRange(250, 500));
  TB := GridBox(I + 1, 4, 18, 87, 18, 93, 24, Point(242, 58));
  mousebox(TB.X1, TB.Y1, TB.X2, TB.Y2, mouse_Left);
  T := GetSystemTime + RandomRange(5000, 5500);
  while (WorldScreen) and (T < GetSystemTime) do
    Wait(RandomRange(100, 200));
  Result := (not WorldScreen);
end;

Function SwichWorld(): Boolean;
Var
W, T, S: Integer;
Begin
  Repeat
    if LoggedIn then
      WaitFunc(@LogMeOut, 500, 5000);
    {
    if LobbyScreen Then
    Begin
      Result := LobbyLogin;
      Exit;
    End;
    }
    repeat
      Repeat
        W := RandomWorld(True, False);
      Until Not InIntArray(S_World, W);
      Debug('Trying next world ' + IntToStr(W) + '.');
      if OpenWorldScreen Then SelectWorld(W);
      if CurrentWorldLS <> W then
        Debug('World ' + IntToStr(W) + ' was full. Trying next world.');
    until CurrentWorldLS = W;
    Debug('Successully switched to world ' + IntToStr(W) + '.');
    if Length(Players[CurrentPlayer].WorldInfo) > 0 then
      Players[CurrentPlayer].WorldInfo[0]:=W;

    LoginPlayer;
  Until LoggedIn;

  Result := True;
End;

Function CustomLogin: Boolean;
var
T: Integer;
Begin
  {
  if LobbyScreen Then
  Begin
    Result := LobbyLogin;
    Exit;
  End;
  }
  Result := LoggedIn;
  If Result Then Exit;

  If SwichWorld Then
    Result := True;
End;

Function LogMeIn: Boolean;
Begin
  Result := DoCondition(30000, 3000, @CustomLogin, @LoggedIn, True);
  SetAngle(SRL_ANGLE_HIGH);
End;

Function GetPrice(ItemName: String; ID: Integer): Integer;
Var
  TempString: String;
  TempData: Variant;
Begin
  TempString := UpperCase(Copy(ItemName, 1, 1)) + LowerCase(Copy(ItemName, 2, Length(ItemName)));
  TempData := GetNumbers(Between('<td class="price">', '<', Between('?obj=' + IntToStr(ID) + '">' + TempString + '</a>', '</tr>', Getpage('http://itemdb-rs.runescape.com/results.ws?query=' + TempString))));
  If Not (TempData = '') Then TempData := StrToInt(TempData);
  If VarType(TempData) = varInteger Then
    Result := TempData
  Else
    Result := 0;
End;
//==============================================================================
//===== Main.simba Include =====================================================
//==============================================================================

Procedure Report;
begin
  S_TR := S_TR + (GetSystemTime - StartTime);
  StartTime := GetSystemTime;
  if (not DebugMode) then ClearDebug;
  Writeln('____________Smurgs SudokuSolver ' + Ver + '____________');
  Writeln('');
  Writeln('Puzzles Solved: ' + ToStr(PuzzlesSolved) + ' (' + ToStr(PuzzlesSolved / (S_TR / 1000.0 / 60.0 / 60.0)) + ' puzzles/hr)');
  Writeln('Time running: ' + MSToTime(Round(S_TR), 0));
  Writeln('Time until break: ' + MSToTime(TimeToBreak - GetSystemTime, 0));
  Writeln('_________________________________________________');
end;

Procedure EndScript(Message: String);
begin
  CloseWindow;
  DoCondition(30000, 5000, @Logout, @LoggedIn, False);
  Report;
  Writeln(Message);
  TerminateScript;
end;

Function BreakTime: Boolean;
begin
  Result := (GetSystemTime > TimeToBreak);
end;

Function PopUps: Boolean;
Begin
  If Not LoggedIn Then Exit;
  Result := (CountColorTolerance(5382947, 300, 80, 505, 300, 25) > 1500);
  If Result Then
  Begin
    Mose(498, 69, 1, 1, True);
  End;
End;

Procedure TakeBreak;
begin
  Writeln('Time for a break');
  S_TR := S_TR + (GetSystemTime - StartTime);

  CloseWindow;
  DoCondition(30000, 5000, @Logout, @LoginPlayerToLob, True);
  Wait(RandomRange(30 * 1000, 60 * 1000));
  DoCondition(30000, 5000, @CustomLogin, @LoggedIn, True);
  TimeToBreak := GetSystemTime + (845 * 60 * 1000) + RandomRange((-5 * 60 * 1000), (5 * 60 * 1000));

  StartTime := GetSystemTime;
end;

Procedure FailCount(Reset: Boolean; FType: String);
Begin
  If Reset Then
  Begin
    F_Count := 0;
    F_String := '';
    Debug('Reset Fail Count');
  End Else Begin
    F_Count := F_Count + 1;
    F_String := F_String + FType +  '. ';
    Debug('Added 1 to Fail Count');
  End;

  If F_Count > 7 Then EndScript(F_String);
End;

Function SudokuScreen: Boolean;
Begin
  Result := GetColor(512, 335) = 797794;
  //If Result Then Debug('In Sudoku Screen') Else Debug('Not In Sudoku Screen');
End;

Function ClosePuzzle: Boolean;
Var
  N, T: Integer;
Begin
  If Not (LoggedIn And SudokuScreen) Then Exit;
  N := 0;
  Repeat
    If LowerCase(PuzzleSizeS) = 'large' Then
    Begin
      Mose(22, 22, 2, 2, True);
    End Else If LowerCase(PuzzleSizeS) = 'small' Then
    Begin
      Mose(496, 23, 2, 2, True);
    End;
    T := GetSystemTime + 5000;
    Repeat
      If GetSystemTime > T Then Break;
      Wat(10, 25);
    Until Not SudokuScreen
    If N > 3 Then Exit;
    Inc(N);
  Until Not SudokuScreen;
  Result := True;
End;

Function RepositionAli: Boolean;
Var
  D, T, X, Y: Integer;
  Ang: Extended;
Begin
  D := DTMFromString(DTM_CACTUS);
  If FindDTMRotated(D, X, Y, MMX1, MMY1, MMX2, MMY2, 0, 360, 0.005, Ang) Then
  Begin
    Writeln(Ang);
    Mose(X, Y, 0, 0, True);
    Flag;
    T := GetSystemTime + 5000;
    Repeat
      If GetSystemTime > T Then Break;
      Wat(10, 25);
    Until Not IsMoving;
    Result := True;
  End;
  FreeDTM(D);
End;

Function FindAli(): Boolean;
var
  arP, arAP: TPointArray;
  arC, arUC: TIntegerArray;
  ararP: T2DPointArray;
  tmpCTS, i, j, arL, arL2, ax, ay: Integer;
  P: TPoint;
  X, Y, Z: Extended;
  B: Boolean;
begin
  tmpCTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(1.51, 0.11);
  B := FindColorsTolerance(arP, 13094084, MSX1, MSY1, MSX2, MSY2, 18);
  ColorToleranceSpeed(tmpCTS);
  SetColorSpeed2Modifiers(0.2, 0.2);
  if not B then
  begin
    Debug('Failed to find the color, no object found.');
    Exit;
  end;

  arC := GetColors(arP);
  arUC := arC;
  ClearSameIntegers(arUC);
  arL := High(arUC);
  arL2 := High(arC);

  for i := 0 to arL do
  begin
    ColorToXYZ(arC[i], X, Y, Z);

    if (X >= 33.13) and (X <= 85.51) and (Y >= 35.35) and (Y <= 89.77) and (Z >= 33.91) and (Z <= 99.20) then
    begin
      for j := 0 to arL2 do
      begin
        if (arUC[i] = arC[j]) then
        begin
          SetLength(arAP, Length(arAP) + 1);
          arAP[High(arAP)] := arP[j];
        end;
      end;
    end;
  end;

  SortTPAFrom(arAP, Point(MSCX, MSCY));
  ararP := SplitTPAEx(arAP, 10, 10);
  arL := High(ararP);

  for i := 0 to arL do
  begin
    if (Length(ararP[i]) < 10) then Continue;
    P := MiddleTPA(ararP[i]);
    MMose(P.x, P.y, 2, 2);
    GetMousePos(ax, ay);
    if WaitUpTextMulti(['alk-to Ali', 'o Ali', 'o Al', 'k-t'], 1000 + RandomRange(200, 500)) then
    begin;
      Mose(ax, ay, 2, 2, False);
      if WaitOptionMulti(['alk-to Ali', 'o Ali', 'o Al', 'k-t'],  1000 + RandomRange(200, 500)) Then
      begin
        Result := True;
        Break;
      end;
    end;
  end;

  if (i = arL + 1) then
  begin
    Debug('Could not find Ali ...');
    Exit;
  end;
end;

Function TalkToAli: Boolean;
Var
  ATPA: Array of TPointArray;
  TPA: TPointArray;
  TP: TPoint;
  Found: Boolean;
  N, T, T2, X, Y: Integer;
  ChatText: Array of String;
Begin
  If Not LoggedIn Then Exit;

  CloseStore;
  ClosePuzzle;

  Found := False;

  Debug('Starting to talk to Ali');

  T := GetSystemTime + RandomRange(10000, 15000);
  Repeat
    If FindAli Then
    Begin
      Found := True;
      Flag;
    End;
    //
    If Not Found Then
    Begin
      FailCount(False, 'Could not find Ali');
      Wat(1000, 2000);
      If Reposition Then
        If Not RepositionAli Then
          FailCount(False, 'Could not reposition');
      MakeCompass(rs_GetCompassAngleDegrees + 90);
      Continue;
    End;

    If GetSystemTime > T Then Exit;
  Until Found;

  T := GetSystemTime + RandomRange(50000, 60000);
  Debug('Walking through Ali chat');
  Repeat
    Wat(5, 10);
    If GetSystemTime > T Then Exit;
  Until FindNPCChatText('ventur', Nothing);
  T := GetSystemTime + RandomRange(50000, 60000);

  Repeat
    Wat(5, 10);
    ClickContinueEx(True, False);
    If GetSystemTime > T Then Exit;
  Until FindNPCChatText('ow', Nothing);

  T := GetSystemTime + RandomRange(50000, 60000);

  If FindNPCChatText('omb', Nothing) Then
    FindNPCChatText('ow', ClickLeft);

  ChatText := ['unes', '', 'amin'];
  If (LowerCase(PuzzleSizeS) = 'large') Then
    ChatText[1] := 'arge'
  Else
    ChatText[1] := 'mall';
  For N := 0 To (Length(ChatText) - 1) Do
  Begin
    T2 := GetSystemTime + RandomRange(15000, 20000);
    Repeat
      If FindNPCChatText('omb', Nothing) Then
        FindNPCChatText('ow', ClickLeft);
      ClickContinueEx(True, False);
      Wat(5, 10);
      If (GetSystemTime > T2) or (GetSystemTime > T) Then Exit;
    Until FindNPCChatText(ChatText[N], ClickLeft);
    T := GetSystemTime + RandomRange(50000, 60000);
  End;

  Repeat
    If GetSystemTime > T Then Exit;
    Result := SudokuScreen;
    Wat(5, 10);
  Until Result;
  Wat(250, 500);
  Debug('Finished talking to Ali. In Sudoku Puzzle');
End;

procedure RemoveElement(var A: TIntegerArray; ToRemove: Integer);
Var
  N, AHigh: Integer;
  Swapped: Boolean;
begin
  AHigh := High(A);
  For N := 0 to AHigh Do
    If A[N] = ToRemove Then
    Begin
      Swap(A[N], A[AHigh]);
      Swapped := True;
    End;
  If Swapped Then SetLength(A, AHigh);
end;

Function getConstRuneBMPs(PrefixNames: Array of String) :Array of Integer;
Var
N: Integer;
Begin
  SetLength(Result, Length(PrefixNames));
  //
  For N := 0 to High(PrefixNames) Do
  Begin
    Case LowerCase(PrefixNames[N]) Of
    'mind': Result[N] := BitmapFromString(21, 5, 'meJxNkEEOgjAQRdeewQPJcZQQgmBBRGQQEYshRVNXxsRjeRR/8pOmyVtMJ9PXP1W5qFyKfVseOlBV/WIVEJE7aM8Tj/11Hm5PoLUdxxew9pskZZoes90JwMNJ52kaTQ/73cVQQsP8+MRxAYOTcIxhUPgSgCQwLOVHjHm7GsDAMeVtBENdD24dGpCBr6832zDMokgBJOEYk/h/wj5iOAOv/wHSyo4D');
    'fire': Result[N] := BitmapFromString(21, 5, 'meJyNjksKgzAURVfhBrrCNohY0/ipn6Sk1sYOYkscieAyvfAgZFSEM7iDe897IlciV0X5qO4aRKcNtO0gpaEM9NMCysP7Z4wbxxk4t6VplWUNv3UAHj+p695npT4+h4bpuyZJAQNJwo7/BISfgP41wYC5tUscC0CSsPMfGOj6+XJljMNwfEvQfAeikH3d');
    'air': Result[N] := BitmapFromString(21, 5, 'meJxdkOEKgkAQhF+5RMTU08zMMzM7Jc7i+hWCryX4IA0sDBLMj93b2+9mTqVapTo71suyisqyg9jW12dzs2whY1zffyDn5jDMo+gcJxeIF/JTUxSt1FVltB4A4bR7vIUwvqYgyEDAoUC2BJoBAeKovY8gYN3ar+8riCNApEAiKWDjLw6ygCCv7/YHz4s5EicQncDGNgt/Q9Z/QYPZpg==');
    'water': Result[N] := BitmapFromString(21, 5, 'meJxlztEKgkAQheGn6KqXLBExbTU1dc3MVpHV2K5C8DE7MDTELvy355sRiRSJTC9NlreoKLqy7FFdq22/o9q7Rt1j7p8vpJQZhjcyZgvDLIqu8blClsNzKcfmNv0jJMzLGgQpBEbE7xneUniGERIw1/rj+wIRAoERa+4KdP1wPHle7CLu3BJo/gWhnpVR');
    'earth': Result[N] := BitmapFromString(21, 5, 'meJyrreuoreuob+hsbOoGoubmXj7PXGLQpElz58xZUVHRWFXVUl3TBkREagSiiRPnALXPmLm0rKweaAIQEa8XiPonzAJqnz59cUlJLRBBDAE6A+KSWiQfAb3T2toPRO3tEzs6Jnd2Te3umd7bNwNie0FhZVFRNS5DkMMEzQSIdgAbzYL7');
    'body': Result[N] := BitmapFromString(21, 5, 'meJxNz1EKgkAUheE1+CD02BJLREwbzcwcM7MxYiympxBcjkvqwIFL8D8Mcudzrsq0ynR+aIpji8qyq6re83yk9QPx3F5tdxv7+xsZ44bhg5yb47hIklO6PyM6nKdT1waJIAiF8TVFUQ5BEE7yMRAE4ffm8oSwrFfM2q+cEQSOIdlI1gGCXSjgDfz7ZrsLgjQMFeJLgNAR4X8XEXj9B+4Xito=');
    'death': Result[N] := BitmapFromString(21, 5, 'meJx10N0KgkAQhuFr8KD7LBHxp9XM1DUzXSNWYzuKwNsSuhA/GBzCCN6DPZlnhhWRFJGMD2VyrFCa1tP04SxrQ4/qoutr37QPpJTpuicyZvS8JAhO4T5Hvw6NS3krz3cIjJDQD2/XjSEwIpZjvm8oCoUYIQHjWr8cRyBCIKwQOiPLGrQSaPt259t2SAivY+Tfn0Cg8RkVgLhI');
    'chaos': Result[N] := BitmapFromString(21, 5, 'meJyrreuoreuob+hsbOoGIukVD4Do4cMncMTp7gFEQAZECogmTpwzadJcIJozZ0VFRWNVVUt1TRsQwRVAdOHS3j9hFsSEGTOXlpXVA02AGEKk9t6+GUATgNqnT19cUlILRBBDkLVjIrhsd890oAkQ2wsKK4uKqiGGYGoXFBQFIjTtnV1TgSZAtAMAijK4aA==');
    'law': Result[N] := BitmapFromString(21, 5, 'meJx1j1sKgzAQRRfSv66wioiPRqvWGl9oLCVV4lcpdFldSi9cEAkUDuEyyZzMiESKRKaX+ns8ZHlbFH1ZDqCqFCqgbh5tpwHyMC44lTLTtAJjPkGQRdE1Pt8APJTQw3Z4pLwzU7IZnvPb91MYUKEEgcPAwJfWJAwYA+1avzxPABY3xG4jrmM9APz95ISuG1tXnGS/y7/2H/zlkkg=');
    'nature': Result[N] := BitmapFromString(21, 5, 'meJxlz8EOgjAQBNBv8OB/KiEEwYKIQLEiFkKKpp6MiZ/JxEn2oMnctvs6qzKtMp0f2rVZMVXVI01jtR6R9jyZi0M47W8Pa/0wPBHvP3FcJMkp3dcIHxRHg5RlR4QOR0C66yzCfH9HUQ5BED5DGQpEpBibUMC6c68wVAgRCETU9yI2+TlHBP6+2e6CIP1HpAYRuUUEri+OX5YH');
    'cosmic': Result[N] := BitmapFromString(21, 5, 'meJx10GEKgkAQBeCDeEkVEVNXM1PXLGwV2YrtVwSdSjpKDwaGgQrer7c73y6jCq0KXW77ajcg3vqmdJ3Rekb6wzIcLffj+WaMm6Y74twrSao03Wd5i8Dha3V9apoRCDlAvoXL9RnHJQRG+A4JEpFHEDBu7SOKlOx/BgIhsqTX/WAThtk/hHeCb8ge26DxD74Ds9c=');
    End;
  End;
End;

Procedure InitRuneBMPs();
//Var
Begin
  If Not LoggedIn Or InitlizedRuneBMPs Then Exit;

  RunesBMP := getConstRuneBMPs(Runes);
  ShopRunesBMP := getConstRuneBMPs(ShopRunes);

  InitlizedRuneBMPs := True;
End;

Procedure FreeRuneBMPs();
Var
N: Integer;
Begin
  For N := 0 to High(RunesBMP) Do
  Begin
    If BitmapExists(RunesBMP[N]) Then FreeBitmap(RunesBMP[N]);
  End;
  //
  For N := 0 to High(ShopRunesBMP) Do
  Begin
    If BitmapExists(ShopRunesBMP[N]) Then FreeBitmap(ShopRunesBMP[N]);
  End;
End;

// 0: Empty  (Else)
Function GetRunes(): Array of Array of Integer;
Var
  N, K, X, Y, DX, DY, R, C, G: Integer;
  TPA: TPointArray;
  TP: TPoint;
  Puzzles: Array of TIntegerArray;
Begin
  If Not (LoggedIn And SudokuScreen) Then Exit;
  //
  InitRuneBMPs;
  //
  G := Length(RunesBMP);
  //
  SetLength(Puzzles, G);
  For N := 0 to High(Puzzles) Do
  Begin
     SetLength(Puzzles[N], G);
  End;
  //
  Case LowerCase(PuzzleSize) Of
    'large': Begin
      X := PuzzleX1 - 5;
      Y := PuzzleY1 - 5;
      DX := BoxDistX;
      DY := BoxDistY;
    End;
    'small': Begin
      X := sPuzzleX1 - 5;
      Y := sPuzzleY1 - 5;
      DX := sBoxDistX;
      DY := sBoxDistY;
    End;
  End;
  //
  For N := 0 to High(RunesBMP) Do
  Begin
    If FindBitmapsSpiralTolerance(RunesBMP[N], X, Y, TPA, X, Y, X + G * DX, Y + G * DY, 15) Then
    Begin
      For K := 0 to High(TPA) Do
      Begin
        TP := TPA[K];
        For C := 1 to G Do
        Begin
           For R := 1 to G Do
           Begin
              If PointInBox(TP, IntToBox(X, Y, X + C * DX, Y + R * DY)) Then
              Begin
                Puzzles[R - 1][C - 1] := N + 1;
                R := G;
                C := G;
              End;
           End;
        End;
      End;
    End;
  End;
  Debug('Finished getting runes position');
  Result := Puzzles;
End;

Procedure RemovePossibleValues(R, C, V: Integer);
Var
  A, B: Integer;
Begin
  Case R Of
    0, 1, 2: Begin
      Case C Of
        0, 1, 2: Begin
          For A := 0 to 2 Do
            For B := 0 to 2 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        3, 4, 5: Begin
          For A := 0 to 2 Do
            For B := 3 to 5 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        6, 7, 8: Begin
          For A := 0 to 2 Do
            For B := 6 to 8 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
      End;
    End;
    3, 4, 5: Begin
      Case C Of
        0, 1, 2: Begin
          For A := 3 to 5 Do
            For B := 0 to 2 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        3, 4, 5: Begin
          For A := 3 to 5 Do
            For B := 3 to 5 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        6, 7, 8: Begin
          For A := 3 to 5 Do
            For B := 6 to 8 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
      End;
    End;
    6, 7, 8: Begin
      Case C Of
        0, 1, 2: Begin
          For A := 6 to 8 Do
            For B := 0 to 2 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        3, 4, 5: Begin
          For A := 6 to 8 Do
            For B := 3 to 5 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        6, 7, 8: Begin
          For A := 6 to 8 Do
            For B := 6 to 8 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
      End;
    End;
  End;
End;

Function Contain(A: TIntegerArray; V: Integer): Boolean;
Var
  N: Integer;
Begin
  For N := 0 to High(A) Do
    If A[N] = V Then
    Begin
      Result := True;
      Exit;
    End;
End;

Procedure SinglePosition(R, C: Integer);
Var
  A: Integer;
Begin
  For A := 0 to 8 Do
    If Not (Puzzle[A][C] = 0) Then
      RemoveElement(PossibleValues[R][C], Puzzle[A][C]);

  For A := 0 to 8 Do
    If Not (Puzzle[R][A] = 0) Then
      RemoveElement(PossibleValues[R][C], Puzzle[R][A]);
End;

Procedure CandidateLines(Box: Integer);
Var
  A, B, N, N2, N3, N4, Count, XR, YR, H: Integer;
  CTP: TPointArray;
  BoxX, BoxY: TIntegerArray;
  AlreadySolved: Boolean;
Begin
  SetLength(CTP, 9);
  For N4 := 0 to 8 Do
    CTP[N4] := IntToPoint(-1, -1);
  SetLength(BoxX, 3);
  SetLength(BoxY, 3);
  Case Box Of
    0: Begin
      BoxX := [0, 1, 2];
      BoxY := [0, 1, 2];
    End;
    1: Begin
      BoxX := [0, 1, 2];
      BoxY := [3, 4, 5];
    End;
    2: Begin
      BoxX := [0, 1, 2];
      BoxY := [6, 7, 8];
    End;
    3: Begin
      BoxX := [3, 4, 5];
      BoxY := [0, 1, 2];
    End;
    4: Begin
      BoxX := [3, 4, 5];
      BoxY := [3, 4, 5];
    End;
    5: Begin
      BoxX := [3, 4, 5];
      BoxY := [6, 7, 8];
    End;
    6: Begin
      BoxX := [6, 7, 8];
      BoxY := [0, 1, 2];
    End;
    7: Begin
      BoxX := [6, 7, 8];
      BoxY := [3, 4, 5];
    End;
    8: Begin
      BoxX := [6, 7, 8];
      BoxY := [6, 7, 8];
    End;
  End;

  For N := 1 to 9 Do
  Begin
    AlreadySolved := False;
    For A := BoxX[0] to BoxX[2] Do
      For B := BoxY[0] to BoxY[2] Do
        If Puzzle[A][B] = N Then AlreadySolved := True;

    If Not AlreadySolved Then
    Begin
      Count := 0;
      SetLength(CTP, 9);
      For N4 := 0 to 8 Do
        CTP[N4] := IntToPoint(-1, -1);
      For A := BoxX[0] to BoxX[2] Do
      Begin
        For B := BoxY[0] to BoxY[2] Do
        Begin
          If (Contain(PossibleValues[A][B], N)) Then
          Begin
            CTP[Count] := IntToPoint(A, B);
            Count := Count + 1;
          End;
        End;
      End;
      If Count > 0 Then SetLength(CTP, Count);
      If ((Count = 2) Or (Count = 3)) Then
      Begin
        H := High(CTP);
        XR := CTP[0].X;
        YR := CTP[0].Y;
        For N2 := 1 to H Do
        Begin
          If Not (XR = CTP[N2].X) Then Break;
          If ((N2 = H) And (XR = CTP[H].X)) Then
          Begin
            For N3 := 0 to 8 Do
            Begin
              If Contain(BoxY, N3) Then Continue;
              RemoveElement(PossibleValues[XR][N3], N);
            End;
          End;
        End;
        For N2 := 1 to H Do
        Begin
          If Not (YR = CTP[N2].Y) Then Break;
          If ((N2 = H) And (YR = CTP[H].Y)) Then
          Begin
            For N3 := 0 to 8 Do
            Begin
              If Contain(BoxX, N3) Then Continue;
              RemoveElement(PossibleValues[N3][YR], N);
            End;
          End;
        End;
      End;
    End;
  End;
End;

Function SolveSudoku: Boolean;
Var
  N, R, C, B, T: Integer;
  Done: Boolean;
Begin
  If Not (LoggedIn And SudokuScreen) Then Exit;
  T := GetSystemTime;

  Case LowerCase(PuzzleSizeS) Of
    'small': Begin
      smallOrder := GetRunes();
      Debug(toStr(smallOrder));

      If Not (smallOrder[1][1] = 0) Then
      Begin
        smallOrder[0][0] := smallOrder[2][2];
        smallOrder[0][1] := smallOrder[1][2];
        smallOrder[0][2] := smallOrder[1][1];
        smallOrder[0][3] := smallOrder[2][1];
        smallOrder[1][0] := smallOrder[2][1];
        smallOrder[1][3] := smallOrder[2][2];
        smallOrder[2][0] := smallOrder[1][1];
        smallOrder[2][3] := smallOrder[1][2];
        smallOrder[3][0] := smallOrder[1][2];
        smallOrder[3][1] := smallOrder[2][2];
        smallOrder[3][2] := smallOrder[2][1];
        smallOrder[3][3] := smallOrder[1][1];
      End Else If Not (smallOrder[1][0] = 0) Then
      Begin
        smallOrder[0][0] := smallOrder[1][3];
        smallOrder[0][1] := smallOrder[2][3];
        smallOrder[0][2] := smallOrder[2][0];
        smallOrder[0][3] := smallOrder[1][0];
        smallOrder[1][1] := smallOrder[2][0];
        smallOrder[1][2] := smallOrder[2][3];
        smallOrder[2][1] := smallOrder[1][0];
        smallOrder[2][2] := smallOrder[1][3];
        smallOrder[3][0] := smallOrder[2][3];
        smallOrder[3][1] := smallOrder[1][3];
        smallOrder[3][2] := smallOrder[1][0];
        smallOrder[3][3] := smallOrder[2][0];
      End Else If Not (smallOrder[0][0] = 0) Then
      Begin
        smallOrder[0][1] := smallOrder[3][0];
        smallOrder[0][2] := smallOrder[3][3];
        smallOrder[1][0] := smallOrder[0][3];
        smallOrder[1][1] := smallOrder[3][3];
        smallOrder[1][2] := smallOrder[3][0];
        smallOrder[1][3] := smallOrder[0][0];
        smallOrder[2][0] := smallOrder[3][3];
        smallOrder[2][1] := smallOrder[0][3];
        smallOrder[2][2] := smallOrder[0][0];
        smallOrder[2][3] := smallOrder[3][0];
        smallOrder[3][1] := smallOrder[0][0];
        smallOrder[3][2] := smallOrder[0][3];
      End Else
        Exit;

      Done := True;
      For R := 0 to 3 Do
        For C := 0 to 3 Do
          If smallOrder[R][C] = 0 Then Done := False;
    End;
    'large': Begin
      Puzzle := GetRunes;
      Debug(toStr(Puzzle));

      For R := 0 To 8 Do
        For C := 0 To 8 Do
          If Puzzle[R][C] = 0 Then PossibleValues[R][C] := [1, 2, 3, 4, 5, 6, 7, 8, 9]
          Else Begin
            SetLength(PossibleValues[R][C], 1);
            PossibleValues[R][C] := [0];
          End;

      For N := 0 to 19 Do
      Begin
        For R := 0 to 8 Do
          For C := 0 to 8 Do
            If Not (Puzzle[R][C] = 0) Then
              RemovePossibleValues(R, C, Puzzle[R][C]);

        For R := 0 to 8 Do
          For C := 0 to 8 Do
            If ((Not Contain(PossibleValues[R][C], 0)) And (Length(PossibleValues[R][C]) = 1)) Then
            Begin
              Puzzle[R][C] := PossibleValues[R][C][0];
              SetLength(PossibleValues[R][C], 1);
              PossibleValues[R][C] := [0];
            End;

        {For R := 0 to 8 Do
          Writeln(Puzzle[S]);
        Writeln('Square');
        For R := 0 to 8 Do
          Writeln(PossibleValues[S]);
        Writeln('***********');  }

        For R := 0 to 8 Do
          For C := 0 to 8 Do
            If (Puzzle[R][C] = 0) Then
              SinglePosition(R, C);

        For R := 0 to 8 Do
          For C := 0 to 8 Do
            If ((Not Contain(PossibleValues[R][C], 0)) And (Length(PossibleValues[R][C]) = 1)) Then
            Begin
              Puzzle[R][C] := PossibleValues[R][C][0];
              SetLength(PossibleValues[R][C], 1);
              PossibleValues[R][C] := [0];
            End;

       { For R := 0 to 8 Do
          Writeln(Puzzle[S]);
        Writeln('Single Line');
        For R := 0 to 8 Do
          Writeln(PossibleValues[S]);
        Writeln('***********');    }

        For B := 0 to 8 Do
          CandidateLines(B);

        For R := 0 to 8 Do
          For C := 0 to 8 Do
            If ((Not Contain(PossibleValues[R][C], 0)) And (Length(PossibleValues[R][C]) = 1)) Then
            Begin
              Puzzle[R][C] := PossibleValues[R][C][0];
              SetLength(PossibleValues[R][C], 1);
              PossibleValues[R][C] := [0];
            End;

        {For R := 0 to 8 Do
          Writeln(Puzzle[S]);
        Writeln('Candidate');
        For R := 0 to 8 Do
          Writeln(PossibleValues[S]);}

        {For R := 0 to 8 Do
          For C := 0 to 8 Do
            Writeln(PossibleValues[R][C]);

        Writeln('---------------------'); }

        Done := True;
        For R := 0 to 8 Do
          For C := 0 to 8 Do
            If Puzzle[R][C] = 0 Then Done := False;

        If Done Then Break;
      End;
    End;
    Else
      EndScript('Wrong size of puzzle entered');
  End;
  Writeln('Completed Solve in ' + IntToStr(GetSystemTime - T) + ' milliseconds.');
  If Done Then Result := True;
End;

Function PlaceRunes: Boolean;
Var
  N, A, B, T, X, Y: Integer;
  BRune: TPointArray;
Begin
  If Not (LoggedIn And SudokuScreen) Then Exit;
  Debug('Placing runes into puzzle');
  MouseSpeed := RandomRange(Round(S_MouseSpeed * 0.95), Round(S_MouseSpeed * 1.05));
  Case LowerCase(PuzzleSizeS) Of
    'small': Begin
      SetLength(Brune, 5);
      T := GetSystemTime + RandomRange(30000, 45000);

      Brune[1] := IntToPoint(31, 309);
      Brune[2] := IntToPoint(88, 309);
      Brune[3] := IntToPoint(141, 308);
      Brune[4] := IntToPoint(196, 309);

      For N := 1 to 4 Do
      Begin
        If GetSystemTime > T Then Exit;
        Mose(BRune[N].X, BRune[N].Y, 5, 5, True);
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
        For A := 0 to 3 Do
          For B := 0 to 3 Do
            If smallOrder[A][B] = N Then
            Begin
              X := 164 + B * 52 + 16;
              Y := 57 + A * 52 + 16;
              If Not((CountColorTolerance(C_YELLOWBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 300) or
                     (CountColorTolerance(C_ORANGEBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 300)) Then Continue;
              Mose(X, Y, 5, 5, True);
              Wat(W1, Round(Multi * W1));
            End;
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
      End;
      Wat(250, 350);
      Result := True;

      If Result Then
      Begin
        Debug('Solved Small Puzzle Correctly. Opening Casket.');
        Mose(325, 315, 20, 3, True);
      End;
    End;
    'large': Begin
      SetLength(BRune, 10);
      T := GetSystemTime + RandomRange(75000, 120000);

      Brune[1] := IntToPoint(30, 112);
      Brune[2] := IntToPoint(30, 162);
      Brune[3] := IntToPoint(30, 212);
      Brune[4] := IntToPoint(30, 262);
      Brune[5] := IntToPoint(30, 312);
      Brune[6] := IntToPoint(80, 162);
      Brune[7] := IntToPoint(80, 212);
      Brune[8] := IntToPoint(80, 262);
      Brune[9] := IntToPoint(80, 312);

      For N := 1 to 9 Do
      Begin
        If GetSystemTime > T Then Exit;
        Mose(BRune[N].X, BRune[N].Y, 5, 5, True);
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
        For A := 0 to 8 Do
          For B := 0 to 8 Do
            If (Puzzle[A][B] = N) Then
            Begin
              X := 118 + B * 37 + 15;
              Y := 8 + A * 37 + 15;
              If Not((CountColorTolerance(C_YELLOWBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 400) or
                     (CountColorTolerance(C_ORANGEBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 400)) Then Continue;
              Mose(X, Y, 5, 5, True);
              Wat(W1, Round(Multi * W1));
            End;
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
      End;
      Wat(250, 350);
      Result := True;

      If Result Then
      Begin
        Debug('Solved Large Puzzle Correctly. Opening Casket.');
        Mose(50, 70, 20, 3, True);
      End;
    End;
    Else
      EndScript('Wrong Size Puzzle Specified');
  End;

  T := GetSystemTime + 5500;
  Repeat
    Wat(10, 25);
    If GetSystemTime > T Then
    Begin
      Result := False;
      ClosePuzzle;
      Exit;
    End;
  Until Not SudokuScreen
End;

Function CollectRunes: Boolean;
Var
  N, T, D, Q: Integer;
  TPA: TPointArray;
  TP: TPoint;
Begin
  If Not LoggedIn Then Exit;
  Debug('Collecting Runes');
  //
  T := GetSystemTime + RandomRange(3500, 5000);
  Repeat
    Wat(5, 10);
    If GetSystemTime > T Then Exit;
  Until FindNPCChatTextMulti(['Find out', 'ind', 'out', 'at'], ClickLeft);
  //
  T := GetSystemTime + RandomRange(3500, 5000);
  Repeat
    Wat(5, 10);
    If GetSystemTime > T Then Exit;
  Until StoreScreen;
  //
  T := GetSystemTime + RandomRange(60000, 65000);
  For N := 0 to High(ShopRunesBMP) Do
  Begin
    If FindBitmapsSpiralTolerance(ShopRunesBMP[N], MSX1, MSY1, TPA, MSX1 + 30, MSY1 + 30, MSX2 - 30, MSY2 - 30, 10) Then
    Begin
       //
       TP := MiddleTPA(TPA);
       Q := StoreQuantity(TP);
       Debug('We can buy ' + toStr(Q) + ' ' + Runes[N] + ' rune from store now');
       MMose(TP.X, TP.Y, 2, 2);
       Wat(50, 100);
       If WaitUpTextMulti(['Value', 'alue', 'lue'], 1500) Then
       Begin
         Repeat
           If GetSystemTime > T Then Exit;
           //
           If InChat('enough') Then EndScript('Ran out of money');
           If PinScreen Then InPin(Players[0].PIN);
           //
           Mose(TP.X, TP.Y, 2, 2, False);
           Wat(50, 100);
           WaitOption(toStr(Q_STORE_BUY), 500);
           Q := Q - Q_STORE_BUY;
         Until 1 > Q;
       End;
    End;
  End;

  CloseStore;

  Debug('Finished Collecting Runes ...');

  Result := True;
  If Result Then
    Debug('Bought runes')
  Else
    Debug('Couldnt buy runes');
End;

Procedure VariableReset;
Var
  A, B: Integer;
Begin
  Solved := False;
  SetLength(Puzzle, 9);
  For A := 0 To 8 Do
    SetLength(Puzzle[A], 9);

  SetLength(PossibleValues, 9);
  For A := 0 To 8 Do
  Begin
    SetLength(PossibleValues[A], 9);
    For B := 0 to 8 Do
      SetLength(PossibleValues[A][B], 9);
  End;
End;

Procedure SetVariables;
Var
  A, B: Integer;
begin
  TimeToBreak := GetSystemTime + (330 * 60 * 1000) + RandomRange((-5 * 60 * 1000), (5 * 60 * 1000));
  StartTime := GetSystemTime;

  Solved := False;
  InitlizedRuneBMPs := False;

  BoxDistX := 37;
  BoxDistY := 37;
  sBoxDistX := 51;
  sBoxDistY := 52;

  PuzzleX1 := 118;
  PuzzleY1 := 8;
  sPuzzleX1 := 164;
  sPuzzleY1 := 57;

  Case LowerCase(PuzzleSize) Of
    'large': Begin
      PuzzleSizeS := 'large';
      Runes := RUNES_LARGE;
      ShopRunes := SHOP_RUNES_LARGE;
      SetLength(Puzzle, 9);
      For A := 0 To 8 Do
        SetLength(Puzzle[A], 9);

      SetLength(PossibleValues, 9);
      For A := 0 To 8 Do
      Begin
        SetLength(PossibleValues[A], 9);
        For B := 0 to 8 Do
          SetLength(PossibleValues[A][B], 9);
      End;
    End;
    'small': Begin
      PuzzleSizeS := 'small';
      Runes := RUNES_SMALL;
      ShopRunes := SHOP_RUNES_SMALL;
      SetLength(smallOrder, 4);
      For A := 0 to 3 Do
        SetLength(smallOrder[A], 4);
    End;
    Else EndScript('Puzzle size entered incorrectly');
  End;

  AddOnTerminate('FreeRuneBMPs');
end;

Procedure ScriptSetup;
begin
  SetupSRL;
  DeclarePlayers;
end;

Begin
  ClearDebug;
  ScriptSetup;
  SetVariables;

  if (not LogMeIn) then EndScript('Could not login pre-loop');
  Repeat
    if (not LogMeIn) then EndScript('Could not login in-loop');

    //if BreakTime then TakeBreak;

    if PopUps Then Wat(500, 750);

    VariableReset;

    If TalkToAli Then
    Begin
      If SolveSudoku Then
      Begin
        If PlaceRunes Then
        Begin
          If CollectRunes Then
          Begin
            Solved := True;
          End Else Begin
            Solved := False;
            FailCount(False, 'Could not collect runes');
          End;
        End Else Begin
          FailCount(False, 'Could not place runes');
        End;
      End Else Begin
        FailCount(False, 'Could not solve the puzzle');
      End;
    End Else Begin
      FailCount(False, 'Could not talk to Ali');
    End;

    If Solved Then
    Begin
      FailCount(True, '');
      PuzzlesSolved := PuzzlesSolved + 1;
      Report;
      SwichWorld;
    End Else Begin
      ClosePuzzle;
      CloseStore;
      Debug('Current FailCount: ' + F_String);
    End;
  Until False;
  TerminateScript;
End.
