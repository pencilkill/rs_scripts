program blueDragon;
{$DEFINE SMART}
{$DEFINE WALKER}
{$I AeroLib/AeroLib.Simba}

Const
  DEBUG_MODE = true;
  AWARDS = ['Blue dragonhide', 'Dragon bone'];

var
CastleWarsChest, CityGate, CaveEnterance, BlueDragon, Corpse, DragonBone : TMSObject;
RSW, RSC : TRSWalker;
Ring, Safety : TItem;

procedure DeclarePlayer();
begin
  Me.Name := 'geraldaltemosefkwf@yahoo.com';
  Me.Pass := 'sAhtKGG6';
  Me.Pin := '';
  Me.Member := True;
  Me.Active := True;
end;

procedure debug(v : Variant);
begin
  if DEBUG_MODE then
    writeln('[D] ' + toStr(v));
end;

procedure init();
var
tsa : TStringArray;
begin
  initAL();

  DeclarePlayer();
  loginPlayer(false);

  with Ring do
  begin
    Name := 'Ring of dueling';
    DTM := DTMFromString('mbQAAAHicY2VgYNjBxMCwCYi3A/EuIN4MxNWMDAwtUFzOCOGf3SLO8O6CLMP+5eIMgl0iDM1FvAxcQP3omBELBgMApPsM8A==');
    Wieldable := true;
  end;
  with Safety do
  begin
    Name := 'Safety';
    DTM := DTMFromString('mbQAAAHicY2VgYHBnZGDYAMUXgPg8EO8Fip8H4rVAfBaIfwGxnaUlg4w4A4OxFgeDsgwEC6gzMHAxoGJGLBgMAOkNCYs=');
  end;

  CastleWarsChest.create('Castle wars chest', ['Open Bank chest', 'Bank chest'], [createCol(6316392, 10, 0.24, 0.09)], [createCol(6316392, 10, 0.24, 0.09)]);
  CityGate.create('City gate', ['Open City gate', 'City gate', 'City', 'gate'], [createCol(1055004, 10, 0.90, 0.48)], [createCol(4489653, 28, 0.03, 1.39)]);
  CaveEnterance.create('Cave entrance', ['Enter Cave entrance', 'Cave entrance', 'Cave', 'entrance'], [createCol(742503, 5, 0.05, 0.59)], [createCol(998219, 5, 0.16, 1.42)]);
  BlueDragon.create('Blue dragon', tsa, [createCol(6631206, 11, 0.07, 1.70)], [createCol(6631206, 11, 0.07, 1.70)]);
  Corpse.create('Corpse', tsa, [createCol(12436422, 7, 0.20, 0.14)], [createCol(12436422, 7, 0.20, 0.14)], 10, 0, 0, 0);
  DragonBone.create('Dragon Bones', ['Take', 'more options'], [createCol(13487830, 17, 0.11, 0.26)], [createCol(13487830, 17, 0.11, 0.26)]);

  RSW.Init('custom', 'Gu''tanoth');
  RSW.walkStyle := EWalkStyle.wsSPS;
  RSC.Init('custom', 'OgreCave');
  RSC.walkStyle := EWalkStyle.wsSPS;

  addOnTerminate('free');

  debug('Init finished ...');
end;

function loginCheck(): Boolean;
begin
  result := loginPlayer(false);
end;

function getBankMode(): string; override;
begin
  result := 'Tabbed';
end;

function blackBackground() : Boolean;
begin
  result := (percentBlackMM() > 20);
end;

procedure restoreCompass();
begin
  mouseBox(pointToBox(point(560, 20),2), MOUSE_LEFT);;
end;

function boneStore(): Boolean;
var
  bank, chest: TPoint;
  teleport : Boolean;
begin
  teleport := Ring.inEquipment();
  if findSymbol(bank, SYMBOL_Bank) then
  begin
    debug('Bank symbol found ' + toStr(bank));
    mouseBox(pointToBox(bank, 2), MOUSE_LEFT);
    waitFunc(@ isPlayerWalking, 1500, 15000);
    if CastleWarsChest.find(chest) and openBankPoint(chest, false) then
    begin
      debug('Bank chest found ' + toStr(chest));
      quickDeposit('inv');
      if not teleport then
      begin
        searchBank('Ring');
        if not withdrawPoint(intToPoint(85, 100), 1) then
        begin
          debug('Withdraw ring : false');
          exit(false);
        end;
        closeInterface();
        Ring.interact(MOUSE_LEFT);
      end;
      exit(true);
    end;
  end;
  exit(false);
end;

function gutanothWalker: Boolean;
var
path : TPointArray;
dist : TPoint;
begin
  path := [Point(346, 297), Point(398, 296), Point(402, 326), Point(405, 356), Point(434, 357), Point(466, 359), Point(498, 362), Point(537, 365), Point(574, 368), Point(607, 366), Point(648, 369), Point(683, 374), Point(724, 385), Point(756, 392), Point(786, 397)];
  RSW.walkPath(path);
  path := [Point(806, 420), Point(783, 448), Point(747, 469), Point(705, 440), Point(671, 409), Point(631, 422), Point(588, 409)];
  RSW.walkPath(path);
  waitFunc(@ isPlayerWalking, 500, 15000);
  wait(randomrange(1500, 2500));
  if CityGate.find(dist) then
  begin
    debug('Open City gate ...');
    mouseBox(pointToBox(dist, 2), MOUSE_MOVE);
    if waitUpTextMulti(['Open City gate', 'City gate', 'City', 'gate'], randomrange(500, 1500)) then
    begin
      fastClick(MOUSE_RIGHT);
      waitFunc(@menuOpen, 20, 500);
      chooseOption('Open');
    end;
  end;
  path := [Point(588, 409), Point(587, 445), Point(638, 454), Point(610, 495)];
  RSW.walkPath(path);
  if findSymbol(dist, SYMBOL_Dungeon) then
  begin
    debug('Dungeon symbol found ' + toStr(dist));
    mouseBox(pointToBox(dist, 2), MOUSE_LEFT);
    waitFunc(@ isPlayerWalking, 1500, 15000);
    wait(randomrange(1500, 2500));
  end;
  if CaveEnterance.find(dist) then
  begin
    debug('Enter Cave entrance ...');
    mouseBox(pointToBox(dist, 2), MOUSE_MOVE);
    if waitUpTextMulti(['Enter Cave entrance', 'Cave entrance', 'Cave', 'entrance'], randomrange(500, 1500)) then
    begin
      fastClick(MOUSE_RIGHT);
      waitFunc(@menuOpen, 20, 500);
      chooseOption('Enter');
      waitFunc(@blackBackground, 1000, 10000);
      exit(true);
    end;
  end;
  debug('Gutanoth walk : false');
  exit(false);
end;

function dungonWalker: Boolean;
var
  path : TPointArray;
begin
  path := [Point(224, 355), Point(224, 318), Point(229, 290), Point(253, 268), Point(277, 236)];
  result := RSC.walkPath(path);
end;

function repostionSafety() : Boolean
var
  dist : TPoint;
  box : TBox;
begin
  setCompass(90);
  setAngle(ANGLE_HIGH);
  if Corpse.find(5, point(MSX2, MSY1), dist) then
  begin
    mouseBox(pointToBox(dist,2), MOUSE_RIGHT);
    waitFunc(@menuOpen, 20, 500);
    if optionExistsMulti(['Walk there', 'Walk']) then
    begin
      debug('Repostion Corpse ...');
      chooseOption('Walk');
      wait(randomrange(1500, 2500));
      waitFunc(@ isPlayerWalking, 500, 5000);
      wait(randomrange(1500, 2500));
      if Safety.findIn(AREA_MS, dist) then
      begin
        debug('Repostion Safety ...');
        box := pointToBox(point(dist.x - 10, dist.y), 2);
        checkAreaBounds(box);
        mouseBox(box, MOUSE_LEFT);
      end;
    end;
  end;
  restoreCompass();
  exit(true);
end;

function dragonExist(): Boolean;
begin
  debug('Check Blue dragon ...');
  result := BlueDragon.find();
end;

function dragonNotExist(): Boolean;
begin
  result := not dragonExist();
end;

function dragonAttactWait(exist : Boolean = true): Boolean;
begin
  if exist then
  result := waitFunc(@dragonExist, 1000, 300000)
  else
  result := waitFunc(@dragonNotExist, 1000, 300000)
end;

function dragonAttact(): Boolean;
var
  dist : TPoint;
begin
  debug('Find Blue dragon ...');
  if BlueDragon.find(5, point(MSX2, MSY1), dist) then
  begin
    mouseBox(pointToBox(dist, 2), MOUSE_RIGHT);
    waitFunc(@menuOpen, 20, 500);
    if optionExistsMulti(['Attack Blue dragon', 'Attack Blue dragon']) then
    begin
      debug('Attack Blue dragon ...');
      chooseOption('Attack Blue dragon');
      exit(true);
    end;
  end;
end;

function dragonBoneExist(): Boolean;
begin
  result := DragonBone.find();
end;

function dragonBoneWait(): Boolean;
begin
  result := waitFunc(@dragonBoneExist, 500, 15000);
end;

function boneCollect: Boolean;
var
  i : Integer;
  dist : TPoint;
begin
  setAngle(ANGLE_HIGH);
  dragonBoneWait();
  for i := 0 to high(AWARDS) do
  begin
    if DragonBone.find(dist) then
    begin
      mouseBox(pointToBox(dist, 2), MOUSE_RIGHT);
      waitFunc(@menuOpen, 20, 500);
      if optionExistsMulti(['Take Dragon bone', 'Dragon bone']) then
      begin
        chooseOption('Take ' + AWARDS[i]);
        if i = 0 then
        begin
           wait(randomrange(1500, 2500));
           waitFunc(@ isPlayerWalking, 500, 5000);
           wait(randomrange(1500, 2500));
        end;
      end;
    end;
  end;
  setAngle(ANGLE_HIGH);
  exit(true);
end;

function invFullCheck: Boolean;
begin
  result := not isInvFull();
end;

function ringBack: Boolean;
begin
  gametab(TAB_EQUIP);
  mouseBox(pointToBox(point(695, 385), 2), MOUSE_RIGHT);
  waitFunc(@menuOpen, 20, 500);
  if optionExistsMulti(['Castle Wars', 'Castle']) then
  begin
    debug('Castle Wars ring back ...');
    chooseOption('Castle Wars');
    exit(true);
  end;
  exit(false);
end;

procedure free();
begin
  RSW.free();
  FreeDTM(Ring.DTM);
  FreeDTM(Safety.DTM);
end;

begin
  init();
  while invFullCheck() do
          begin
            repostionSafety();
            dragonAttactWait();
            if dragonAttact() then
            begin
              dragonAttactWait(false);
              boneCollect();
            end;
          end;
  {
  while loginCheck() do
  begin
    if boneStore() then
    begin
      if gutanothWalker() then
      begin
        if dungonWalker() then
        begin
          while invFullCheck() do
          begin
            repostionSafety();
            dragonAttactWait();
            if dragonAttact() then
            begin
              dragonAttactWait();
              boneCollect();
            end;
          end;
          ringBack();
        end;
      end;
    end;
  end;
  }
end.
