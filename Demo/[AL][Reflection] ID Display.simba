program IDDisplay;
{$DEFINE SMART}
{$i AeroLib/AeroLib.Simba}
{$i Reflection/Reflection.Simba}
//yellow = npc
//aqua = objgame
//red = objwall
//purple = floordec
//silver = boundery
//brown/red = gitem
const captureScreen = false;

      DebugNPCs = true;
      DebugInv = true;
      DebugObjGame = true;
      DebugObjWall = false;
      DebugObjFloorDecoration = false;
      DebugObjBoundary = false;
      DebugText = true;
      DebugGroundItems = true;

      debugSettings = false;

var WorkSpace : string;
    ReflectPlayer : TReflectLocalPlayer;

type QuickDisplay = record
  _string, _font : string;
  _point : Tpoint;
  _cl : TColor;
end;

procedure updateScreen;
var npcdisplays, displays, idisplays : array of QuickDisplay;
    i, j, l, k, tempInt : integer;
    rsTile : TPoint;
    _npcs : TReflectNPCArray;
    graphic : TGraphics;
    _objects : TReflectObjectArray;
    _items : TReflectInvItemArray;
    _gitems : TReflectGroundItemArray;
    _box : TBox;
begin
  if DebugText then begin
    tempInt:=5;
    rsTile := TReflectionTiles.GetGlobalTile;
    inc(l);
    setLength(displays, l);
    with displays[high(displays)] do begin
      _string := 'Tile: Point('+intToStr(rsTile.x)+', '+intToStr(rsTile.y)+')';
      _font := 'upchars07';
      _point := Point(5, tempInt);
      _cl := 65280;
    end;
    tempInt:=tempInt+15;
    inc(l);
    setLength(displays, l);
    with displays[high(displays)] do begin
      _string := 'Animation: '+intToStr(ReflectPlayer.GetAnimation);
      _font := 'upchars07';
      _point := Point(5, tempInt);
      _cl := 65280;
    end;
    tempInt:=tempInt+15;
    inc(l);
    setLength(displays, l);
    with displays[high(displays)] do begin
      _string := 'Logged state: '+intToStr(Reflect.Login.GetClientState);
      _font := 'upchars07';
      _point := Point(5, tempInt);
      _cl := 65280;
    end;
    tempInt:=tempInt+15;
    inc(l);
    setLength(displays, l);
    with displays[high(displays)] do begin
      if isLoggedIn then
        _string := 'Uptext: '+TReflectionText.GetUpText;
      _font := 'upchars07';
      _point := Point(5, tempInt);
      _cl := 65280;
    end;
    tempInt:=tempInt+15;
    inc(l);
    setLength(displays, l);
    with displays[high(displays)] do begin
      _string := 'Under attack: '+boolToStr(ReflectPlayer.IsUnderAttack);
      _font := 'upchars07';
      _point := Point(5, tempInt);
      _cl := 65280;
    end;
    tempInt:=tempInt+15;
    inc(l);
    setLength(displays, l);
    with displays[high(displays)] do begin
      _string := 'Plane: '+intToStr(Reflect.Tiles.GetPlane);
      _font := 'upchars07';
      _point := Point(5, tempInt);
      _cl := 65280;
    end;
  end;
  if DebugNPCs then
    _npcs.GetAll;
  for i:=0 to high(_npcs) do begin
    rsTile := TReflectionTiles.TileToMS(_npcs[i].gettile, 0, 0, 75);
    if(PointInBox(rsTile, intToBox(MSX1, MSY1, MSX2, MSY2)))then begin
      inc(j);
      SetLength(npcdisplays, j);
      with npcdisplays[high(npcdisplays)] do begin
        _string := InttoStr(_npcs[i].getid);
        _font := 'statchars07';
        _point := rsTile;
        _cl := clYellow;
      end;
    end;
  end;
  if DebugObjGame then
    _objects.GetAll(ObjGame, 20);
  for i:=0 to high(_objects) do begin
    rsTile := TReflectionTiles.TileToMS(_objects[i].gettile, 0, 0, 50);
    if(PointInBox(rsTile, intToBox(MSX1, MSY1, MSX2, MSY2)))then begin
      inc(j);
      SetLength(npcdisplays, j);
      with npcdisplays[high(npcdisplays)] do begin
        _string := InttoStr(_objects[i].getid);
        _font := 'statchars07';
        _point := rsTile;
        _cl := clAqua;
      end;
    end;
  end;
  _objects := [];
  if DebugObjWall then
    _objects.GetAll(objWallDecoration, 20);
  for i:=0 to high(_objects) do begin
    rsTile := TReflectionTiles.TileToMS(_objects[i].gettile, 0, 0, 150);
    if(PointInBox(rsTile, intToBox(MSX1, MSY1, MSX2, MSY2)))then begin
      inc(j);
      SetLength(npcdisplays, j);
      with npcdisplays[high(npcdisplays)] do begin
        _string := InttoStr(_objects[i].getid);
        _font := 'statchars07';
        _point := rsTile;
        _cl := clRed;
      end;
    end;
  end;
  _objects := [];
  if DebugObjFloorDecoration then
    _objects.GetAll(objFloorDecoration, 20);
  for i:=0 to high(_objects) do begin
    rsTile := TReflectionTiles.TileToMS(_objects[i].gettile);
    if(PointInBox(rsTile, intToBox(MSX1, MSY1, MSX2, MSY2)))then begin
      inc(j);
      SetLength(npcdisplays, j);
      with npcdisplays[high(npcdisplays)] do begin
        _string := InttoStr(_objects[i].getid);
        _font := 'statchars07';
        _point := rsTile;
        _cl := clPurple;
      end;
    end;
  end;
  _objects := [];
  if DebugObjBoundary then
    _objects.GetAll(objBoundary, 20);
  for i:=0 to high(_objects) do begin
    rsTile := TReflectionTiles.TileToMS(_objects[i].gettile, 0, 0, 100);
    if(PointInBox(rsTile, intToBox(MSX1, MSY1, MSX2, MSY2)))then begin
      inc(j);
      SetLength(npcdisplays, j);
      with npcdisplays[high(npcdisplays)] do begin
        _string := InttoStr(_objects[i].getid);
        _font := 'statchars07';
        _point := rsTile;
        _cl := clSilver;
      end;
    end;
  end;
  if debugInv and (getCurrentTab = TAB_INV) then
    _items.GetAll;
  for i:=0 to high(_items) do begin
    _box := invBox(_items[i].getinvslot);
    inc(k);
    setLength(idisplays, k);
    with idisplays[high(idisplays)] do begin
      _string := intToStr(_items[i].getid);
      _font := 'statchars07';
      _point := Point(_box.x1 - 5, _box.y1);
      _cl := 65280;
    end;
  end;
  if DebugGroundItems then
    _gitems.GetAll(20);
  for i:=0 to high(_gitems) do begin
    rsTile := TReflectionTiles.TileToMS(_gitems[i].gettile, 0, 0, 25);
    if(PointInBox(rsTile, intToBox(MSX1, MSY1, MSX2, MSY2)))then begin
      inc(j);
      SetLength(npcdisplays, j);
      with npcdisplays[high(npcdisplays)] do begin
        _string := InttoStr(_gitems[i].getid);
        _font := 'statchars07';
        _point := rsTile;
        _cl := clMaroon;
      end;
    end;
  end;

  graphic := OS_Smart.Graphics;
  graphic.clear;

  for i:=0 to high(npcdisplays) do begin
    graphic.DrawClippedText(npcdisplays[i]._string, npcdisplays[i]._font, npcdisplays[i]._point, npcdisplays[i]._cl);
  end;

  for i:=0 to high(idisplays) do begin
    graphic.DrawClippedText(idisplays[i]._string, idisplays[i]._font, idisplays[i]._point, idisplays[i]._cl);
  end;

  for i:=0 to high(displays) do begin
    graphic.DrawClippedText(displays[i]._string, displays[i]._font, displays[i]._point, displays[i]._cl);
  end;
end;

procedure doProggy;
var w, h, bmp, graphic, i : integer;
    ProggieLocation : string;
    wasEn : boolean;
begin
 for i:=0 to 1000 do begin
    if(not FileExists(workSpace+'\DEBUG '+toStr(i)+'.png'))then begin
      ProggieLocation := workSpace+'\DEBUG '+toStr(i)+'.png';
      i:=1000;
    end;
 end;
  wasEn := false;
  if not SmartEnabled(OS_Smart.__Target) then begin
    SmartSetEnabled(OS_Smart.__Target, true);
    wasEn := true;
  end;

  graphic := OS_Smart.__Graphics.ToBitmap(false);
  getClientDimensions(w, h);
  bmp := bitmapFromClient(0, 0, w, h);
  SetTransparentColor(graphic, 0);
  fastDrawTransparent(0, 0, graphic, bmp);
  saveBitmap(bmp, ProggieLocation);
  writeln('Saving screen to: '+ProggieLocation);
  FreeBitmap(bmp);

  if wasEn then
    SmartSetEnabled(OS_Smart.__Target, false);
end;

procedure setupDebug;
var i : integer;
begin
  if(not DirectoryExists(ScriptPath+'DEBUG\'))then
    CreateDirectory(ScriptPath+'DEBUG\');

    for i:=0 to 1000 do begin
      if(not DirectoryExists(ScriptPath+'DEBUG\'+toStr(i)))then begin
        CreateDirectory(ScriptPath+'DEBUG\'+toStr(i));
        workSpace := ScriptPath+'DEBUG\'+toStr(i);
        i:=1000;
      end;
    end;
end;

procedure doSetting;
var i, l : integer;
    sett : TIntegerArray;
    ProggieLocation : string;
begin
  for i:=0 to 1000 do begin
    if(not FileExists(workSpace+'\DEBUG '+toStr(i)+'.txt'))then begin
      ProggieLocation := workSpace+'\DEBUG '+toStr(i)+'.txt';
      i:=1000;
    end;
  end;
  sett := TReflectionMisc.GetSettingArray;
  for i:=0 to 1999 do begin
    l := sett[i];
    writeini('0', inttostr(i), inttostr(l), ProggieLocation);
  end;
end;

begin
  SMART_ShowConsole := false;
  SMART_UserAgent := 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:36.0) Gecko/20100101 Firefox/36.0';
  initAL;
  Reflect.Setup;
  OS_Smart.__Graphics.Clear;
  ClearDebug;
  if captureScreen or debugSettings then
    setupDebug;

  while not isLoggedIn do writeln('Please login.');

  ReflectPlayer.Create;//try and have the script started while logged in
  repeat
    if debugSettings then
      doSetting;
    updateScreen;
    if captureScreen then
      doProggy;
  until(false);
end.
