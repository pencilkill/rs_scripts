/////////////////////////////////////////////
//////                                 //////
//             Sudoku Solver               //
//                                         //
//                                         //
// --------------------------------------- //
//                                         //
//           *Instructions*                //
//                                         //
//  + Fill out account setup               //
//  + Start east of Ali                    //
//  + Run the script                       //
//                                         //
/////////////////////////////////////////////
program SudokuSolver;                      //
{$DEFINE SMART}              // Always have this to load smart
//{$I SRL-OSR/SRL.simba}
{$I Reflection/Reflection.simba}         // To load the Reflection include files

Const                                      //
/////////////////////////////////////////////
//===========================================
//===== Account Setup =======================
  Ver = 'V1.13';
                            // Large: Need ~2M/hr to run
  PuzzleSize = 'Large';     // Small: Need ~100k/hr to run
  AccountLogin = 'leladkrupa9746@yahoo.com';        // Runescape Account Login
  AccountPassword = 'NfrgR0WQD';     // Runescape Account Password
  AccountPIN = '';          // Runescape Bank Pin
  DebugMode = True;        // Debug script ?
  Reposition = True;       // Attempt to reposition to find Ali?
  S_MouseSpeed = 100;       // Reflect's MouseSpeed
  S_World = [311, 385];             // World you would like to be not logged into

  MouseWait = 1; // Wait between moving mouse and clicking; and after clicking
  //  Optimal Values:
  //  - 1:  Incredibly Fast
  //  - 75: Human-like

  W1 = 1;        // Wait between placing each rune on the puzzle
  //  Optimal Values:
  //  - 5:  Incredibly Fast
  //  - 50: Human-like

  W2 = 1;       // Wait between picking each rune to place
  //  Optimal Values:
  //  - 50:  Incredibly Fast
  //  - 1000: Human-like

  Multi = 1.05;   // (Multiplier for random wait times)
  //  Wait(RandomRange(W1, Round(Multi * W1)));
  //  1.2: The lowest you should go
  //  2.0: The highest you should go

//===== Account Setup =======================
//===========================================

//===========================================
//===== Don't Edit Any Further ==============
//===========================================

Var
  MyPlayer: TReflectLocalPlayer;
  TimeToBreak, StartTime: Integer;
  S_TR: Extended;

  F_Count: Integer;
  F_String: String;
  Solved, InitlizedRuneBMPs: Boolean;

  Puzzle: Array of Array of Integer;
  PuzzleSizeS: String;
  PossibleValues: Array of Array of Array of Integer;
  PuzzlesSolved: Integer;
  BoxDistX, BoxDistY, sBoxDistX, sBoxDistY: Integer;
  PuzzleX1, PuzzleY1, sPuzzleX1, sPuzzleY1: Integer;
  smallOrder: Array of TIntegerArray;

  Runes, ShopRunes: Array of String;
  RunesBMP, ShopRunesBMP: Array of Integer;

Const
  C_YELLOWBLOCK = 114921;
  C_ORANGEBLOCK = 498170;
  Q_STORE_BUY = 10; // Quantity runes buy from store per

  RUNES_LARGE = ['Mind', 'Fire', 'Air', 'Water', 'Earth', 'Body', 'Death', 'Chaos', 'Law'];  // This is ordered from place runes !
  RUNES_SMALL = ['Earth', 'Water', 'Air', 'Fire'];
  SHOP_RUNES_LARGE = ['Nature', 'Cosmic', 'Death'];
  SHOP_RUNES_SMALL = ['Nature', 'Cosmic', 'Death'];
//==============================================================================
//===== Main.simba Include =====================================================
//==============================================================================
procedure DeclarePlayer();
begin
  MyPlayer.Username := AccountLogin;
  MyPlayer.Password := AccountPassword;
  MyPlayer.Pin := AccountPin;
  MyPlayer.Active := True;
end;

procedure Dev(Message: String);
begin
  if DebugMode then
  begin
    Writeln(Message);
  end;
end;

Procedure ClickContinue();
Begin
  Reflect.KeyBoard.TypeKey(Vk_Space);
  Reflect.KeyBoard.TypeKey(Vk_Back);
End;

Procedure Wat(Min, Max: Integer);
Begin
  Wait(RandomRange(Min, Max));
End;

Procedure Mose(TP: TPoint; Xr, Yr: Integer);
Begin
  Reflect.Mouse.Move(TP, Xr, Yr);
End;

Procedure Mose(TP: TPoint; Xr, Yr: Integer; Button: Boolean); overload;
Var
B: Variant;
Begin
  B := Mouse_Left;
  If Not Button Then B := Mouse_Right;
  Reflect.Mouse.Move(TP, Xr, Yr, B);
End;

Function DoCondition(TimeOut, WaitPer: Integer; Funct: Function: Boolean; Condition: Function: Boolean; Normal: Boolean): Boolean;
Var
  T: Integer;
Begin
  T := GetSystemTime + TimeOut;
  If Normal Then
  Begin
    Repeat
      Funct();
      If (not Condition()) Then Wait(RandomRange(WaitPer, Round(WaitPer * 1.5)));
      If (GetSystemTime > T) Then Exit;
    Until(Condition())
  End Else Begin
    Repeat
      Funct();
      If Condition() Then Wait(RandomRange(WaitPer, Round(WaitPer * 1.5)));
      If (GetSystemTime > T) Then Exit;
    Until(Not Condition())
  End;
  Result := True;
End;

function FindText(var cx, cy: Integer; txt, fonts: TStringArray; xs, ys, xe, ye: Integer): Boolean;
var
  s, j, i: Integer;
begin
  for j := 0 to High(txt) do
    for i := 0 to High(fonts) do
    begin
      s := BitmapFromText(ToStr(txt[j]), ToStr(fonts[i]));

      if (xs < 0) then xs := 0;
      if (ys < 0) then ys := 0;

      Result := FindBitmapMaskTolerance(S, cx, cy, xs, ys, xe, ye, 30, 30);

      FreeBitmap(S);

      if (result) then
        exit;
    end;
end;

Function Chat(Text: TStringArray; Button: Variant): Boolean;
var
  x, y: integer;
  chars: TStringArray;
begin
  chars := [UpChars07, CharsNPC07];

  if (FindText(x, y, Text, chars, MCX1, MCY1, MCX2, MCY2)) then
  begin
    If VarType(Button) = VarBoolean Then
       Begin
          Mose(Point(x, y), 2, 2, Button);
       End Else If Button = 0 Then
       Begin
          Mose(Point(x, y), 2, 2);
       End;
    result := true;
  end;
end;
Function Chat(Text: TStringArray): Boolean; overload;
Begin
  Result := Chat(Text, -1);
End;

Function StoreQuantity(P: TPoint) : Integer;
var
T2DPA: T2DPointArray;
TPA: TPointArray;
B: TBox;
begin
  if (FindColorsTolerance(TPA, clYellow, MSX1 , Min(MSY1, P.Y - 50), MSX2, P.Y, 10)) then
  begin
    T2DPA := ClusterTPA(TPA, 3);
    SortATPAFromMidPoint(T2DPA, P);
    TPA := T2DPA[Low(T2DPA)];
    B := GetTPABounds(TPA);
    Result := StrToInt(GetTextAtEx(B.X1 - 1, B.Y1 - 1, B.X2 + 1, B.Y2 + 1, 0, 3, 15, clYellow, 10, StatChars07));
  end;
end;

Function LoggedIn: Boolean;
Begin
  Result := MyPlayer.IsLoggedIn;
End;

Function SwichWorld(): Boolean;
function SortWorlds(Members: Boolean; PVP: Boolean = False): TIntegerArray;
var
  PVPW, FreeW, MembW: TIntegerArray;
begin
  PVPW := [325, 337];
  FreeW := [301, 308, 316, 326, 335, 381, 382, 383, 384, 385, 393, 394];
  MembW := [302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 317,
            318, 319, 320, 321, 322, 327, 328, 329, 330, 333, 334, 336,
            338, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353,
            354, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369,
            370, 373, 374, 375, 376, 377, 378, 386];
  If Members then
    Result := MembW
  else
    Result := FreeW;
  If (Members) and (PVP) then
    Result := CombineIntArray(PVPW, MembW);
end;

function RandomWorld(Members: Boolean; PVP: Boolean = False): Integer;
var
  Worlds: TIntegerArray;
begin
  Worlds := SortWorlds(Members, PVP);
  Result := Worlds[Random(Length(Worlds))];
end;
function SelectWorld(World: Integer): Boolean;
const
  Worlds: TIntegerArray = [301, 321, 345, 369,
                           302, 322, 346, 370,
                           303, 325, 349, 373,
                           304, 326, 350, 374,
                           305, 327, 351, 375,
                           306, 328, 352, 376,
                           308, 329, 353, 377,
                           309, 330, 354, 378,
                           310, 333, 357, 381,
                           311, 334, 358, 382,
                           312, 335, 359, 383,
                           313, 336, 360, 384,
                           314, 337, 361, 385,
                           316, 338, 362, 386,
                           317, 341, 365, 393,
                           318, 342, 366, 394,
                           319, 343, 367, -1,
                           320, 344, 368, -1];
var
  I: Integer;
  T: TReflectTimer;
begin
  if (not InIntArrayEx(Worlds, I, World)) or (Not Reflect.Login.AtWorldScreen) then
    Exit(False);
  Wait(RandomRange(250, 500));
  Reflect.Mouse.Move(Reflect.Math.GridBox(I + 1, 4, 18, 87, 18, 93, 24, Point(242, 58)), Mouse_Left);
  T.Start;
  while (Reflect.Login.AtWorldScreen) and (T.ElapsedTime < 5000) do
    Wait(RandomRange(100, 200));
  Result := (not Reflect.Login.AtWorldScreen);
end;
Function ChangeWorld(World: Integer): Boolean
var
  Tries: Integer;
begin
  if MyPlayer.IsLoggedIn then
  begin
    MyPlayer.Logout;
    while not Reflect.Login.AtLogin do
      Wait(300);
  end;
  repeat
    Inc(Tries);
    If Reflect.Login.OpenWorldSelector then
      Result := SelectWorld(World)
    else
      Wait(RandomRange(400, 700));
  until (Result) or (Tries > 5);
  If Result then MyPlayer.Login;
End;
Var
W, T, S: Integer;
Begin
  Repeat
    Repeat
      W := Reflect.Login.RandomWorld(True, False);
    Until Not InIntArray(S_World, W);
    Dev('Change World : ' + toStr(W));
    //
    Result := ChangeWorld(W);
  Until Result Or Inc(T) > 5;
End;

Function CustomLogin: Boolean;
Begin
  If Not LoggedIn Then Result := SwichWorld;
End;

Function LogMeIn: Boolean;
Begin
  Result := DoCondition(300000, 60000, @CustomLogin, @LoggedIn, True);

  Reflect.Compass.Make('n');  // Make compass north
End;

Function LogMeOut: Boolean;
Var
T: Integer;
Begin
  Dev('Logout ...');
  T := GetSystemTime + RandomRange(10000, 15000);
  Repeat
    If MyPlayer.IsLoggedIn Then MyPlayer.Logout;
    Wat(1000, 2500);
    If GetSystemTime > T Then Exit;
  Until Not MyPlayer.IsLoggedIn;

  Result := True;
End;

Function GetPuzzlePrice(ItemName: String; ID: Integer): Integer;
Var
  TempString: String;
  TempData: Variant;
Begin
  TempString := UpperCase(Copy(ItemName, 1, 1)) + LowerCase(Copy(ItemName, 2, Length(ItemName)));
  TempData := StrToFloat(Between('<td class="price">', '<', Between('?obj=' + IntToStr(ID) + '">' + TempString + '</a>', '</tr>', Getpage('http://itemdb-rs.runescape.com/results.ws?query=' + TempString))));
  If Not (TempData = '') Then TempData := StrToInt(TempData);
  If VarType(TempData) = varInteger Then
    Result := TempData
  Else
    Result := 0;
End;
//==============================================================================
//===== Main.simba Include =====================================================
//==============================================================================
Procedure Report;
begin
  S_TR := S_TR + (GetSystemTime - StartTime);
  StartTime := GetSystemTime;
  if (not DebugMode) then ClearDebug;
  Writeln('____________Smurgs SudokuSolver for OSR ' + Ver + '____________');
  Writeln('');
  Writeln('Puzzles Solved: ' + FloatToStr(PuzzlesSolved) + ' (' + FloatToStr(PuzzlesSolved / (S_TR / 1000.0 / 60.0 / 60.0)) + ' puzzles/hr)');
  Writeln('Time running: ' + Reflect.Time.MsToTime(Round(S_TR), 0));
  Writeln('Time until break: ' + Reflect.Time.MsToTime(TimeToBreak - GetSystemTime, 0));
  Writeln('_________________________________________________');
end;

Procedure EndScript(Message: String);
begin
  DoCondition(30000, 5000, @CustomLogin, @LoggedIn, False);
  Report;
  Writeln('');
  Writeln('+++++++++++++++++++++++++++++++++++++++++++++++++++++');
  Writeln(Message);
  Writeln('+++++++++++++++++++++++++++++++++++++++++++++++++++++');
  Writeln('');
  TerminateScript;
end;

Function BreakTime: Boolean;
begin
  Result := (GetSystemTime > TimeToBreak);
end;

Function PopUps: Boolean;
Begin
  If Not LoggedIn Then Exit;
  Result := (CountColorTolerance(5382947, 300, 80, 505, 300, 25) > 1500);
  If Result Then
  Begin
    Dev('PopUps is going to dismiss');
    Mose(Point(498, 69), 1, 1, True);
  End;
End;

Procedure TakeBreak;
begin
  Writeln('Time for a break');
  S_TR := S_TR + (GetSystemTime - StartTime);

  DoCondition(30000, 5000, @MyPlayer.Logout, @LoggedIn, False);
  Wait(RandomRange(30 * 1000, 60 * 1000));
  DoCondition(30000, 5000, @CustomLogin, @LoggedIn, True);
  TimeToBreak := GetSystemTime + (845 * 60 * 1000) + RandomRange((-5 * 60 * 1000), (5 * 60 * 1000));

  StartTime := GetSystemTime;
end;

Procedure FailCount(Reset: Boolean; FType: String);
Begin
  If Reset Then
  Begin
    F_Count := 0;
    F_String := '';
    Dev('Reset Fail Count');
  End Else Begin
    F_Count := F_Count + 1;
    F_String := F_String + FType +  '. ';
    Dev('Added 1 to Fail Count');
  End;

  If F_Count > 7 Then EndScript(F_String);
End;

Function SudokuScreen: Boolean;
Begin
  Result := GetColor(512, 335) = 797794;
  //If Result Then Dev('In Sudoku Screen') Else Dev('Not In Sudoku Screen');
End;

Function ClosePuzzle: Boolean;
Var
  N, T: Integer;
Begin
  If Not (LoggedIn And SudokuScreen) Then Exit;

  If LowerCase(PuzzleSizeS) = 'large' Then
  Begin
    Mose(Point(20, 20), 2, 2, True);
  End Else If LowerCase(PuzzleSizeS) = 'small' Then
  Begin
    Mose(Point(500, 20), 2, 2, True);
  End;
  //
  T := GetSystemTime + RandomRange(1500, 2500);;
  Repeat
    If GetSystemTime > T Then Break;
    Wat(10, 25);
  Until Not SudokuScreen;

  Result := True;
End;

Function RepositionAli: Boolean;
Var
  Ali: TReflectNpc;
  Tile: TTile;
Begin
  if Ali.Find('Ali Morrisane') then
  begin
    Tile := Ali.GetTile;
    if Reflect.Map.TileOnMM(Tile) then
    begin
      Mose(Reflect.Tiles.TileToMM(Tile), 1, 1, True);
      MyPlayer.WaitWhileMoving;
      Result := True;
    end;
  end;
End;

Function TalkToAli: Boolean;
Var
  Ali: TReflectNpc;
  TP: TPoint;
  Found, B: Boolean;
  N, T, T2: Integer;
  ChatText: Array of Array of String;
Begin
  If Not LoggedIn Then Exit;

  Dev('Starting to talk to Ali');
  Found := False;
  T := GetSystemTime + RandomRange(5000, 10000);
  Repeat
    Wat(500, 1000);
    //
    If Ali.Find('Ali Morrisane') Then
    Begin
      If Ali.IsOnMS then
      begin
          TP := Ali.GetMsPoint;
          Mose(TP, 2, 2, Mouse_Right);
          While MyPlayer.IsMoving do
          Begin
            Wat(30, 50);
          End;
          If(Reflect.Text.IsUpText('alk-to Ali')) Then
          Begin
            If Reflect.Text.ChooseOption('alk-to Ali') Then
            Begin
              Found := True;
              Break;
            End;
          End;
      end;
      //
      If Not Found Then
      Begin
        If Reposition Then
        Begin
          FailCount(False, 'Could not find Ali');
          If Not RepositionAli Then
          Begin
            FailCount(False, 'Could not reposition');
            Reflect.Compass.Make('n');  // Make compass north
          End;
        End;
      End;
    End;

    If GetSystemTime > T Then  Exit;
  Until Found;

  T := GetSystemTime + RandomRange(1500, 2500);
  Repeat
    Wat(5, 10);
    If GetSystemTime > T Then Exit;
  Until Chat(['continue']);

  T := GetSystemTime + RandomRange(30000, 45000);

  ChatText := [['look at', 'ok at'], ['selec', 'on of', 'unes'], [''], ['amin', 'ne loc', 'ne lo']];

  If (LowerCase(PuzzleSizeS) = 'large') Then
  Begin
    ChatText[2] := ['arge'];
  End Else
  Begin
    ChatText[2] := ['mall'];
  End;

  Repeat
    Wat(5, 10);
    ClickContinue;
    If GetSystemTime > T Then Exit;
  Until Chat(ChatText[0]);

  //
  T := GetSystemTime + RandomRange(30000, 45000);

  For N := 1 To High(ChatText) Do
  Begin
    T2 := GetSystemTime + RandomRange(10000, 15000);
    Repeat
      Wat(5, 10);
      ClickContinue;
      If (GetSystemTime > T2) or (GetSystemTime > T) Then Exit;
    Until Chat(ChatText[N], True);

    T := GetSystemTime + RandomRange(30000, 45000);
  End;

  T := GetSystemTime + RandomRange(8000, 10000);

  Repeat
    If GetSystemTime > T Then Exit;
    Result := SudokuScreen;
    Wat(250, 500);
  Until Result;
End;

procedure RemoveElement(var A: TIntegerArray; ToRemove: Integer);
Var
  N, AHigh: Integer;
  Swapped: Boolean;
begin
  AHigh := High(A);
  For N := 0 to AHigh Do
    If A[N] = ToRemove Then
    Begin
      Swap(A[N], A[AHigh]);
      Swapped := True;
    End;
  If Swapped Then SetLength(A, AHigh);
end;
{
Function getInvRuneBMPs(PrefixNames: Array of String) :Array of Integer;
Var
MyItem: TReflectInvItem;
TB: TBox;
TP: TPoint;
BMP, N: Integer;
Begin
  SetLength(Result, Length(PrefixNames));
  //
  For N := 0 to High(PrefixNames) Do
  Begin
    If Result[N] <> 0 Then Continue;
    If MyItem.Find(PrefixNames[N] + ' rune') Then
    Begin
      TB := MyItem.GetBox;
      TP := Point(Floor((TB.X1 + TB.X2) / 2), Floor((TB.Y1 + TB.Y2) / 2));
      TB := IntToBox(TP.X - 10, TP.Y - 2, TP.X + 10, TP.Y + 2);
      BMP := BitmapFromClient(TB.X1, TB.Y1, TB.X2, TB.Y2);
      Result[N] := BMP;
      Dev('    ''' + LowerCase(PrefixNames[N]) + ''': Result[N] := BitmapFromString(21, 5, ''' + CreateBitmapString(BMP) + ''');');
    End Else EndScript('Inventory item not found : ' + PrefixNames[N] + ' rune');
  End;
End;
}
//all runes updated 4th Sept 2010
Function getConstRuneBMPs(PrefixNames: Array of String) :Array of Integer;
Var
N: Integer;
Begin
  SetLength(Result, Length(PrefixNames));
  //
  For N := 0 to High(PrefixNames) Do
  Begin
    Case LowerCase(PrefixNames[N]) Of
    'mind': Result[N] := BitmapFromString(21, 5, 'meJxNkEEOgjAQRdeewQPJcZQQgmBBRGQQEYshRVNXxsRjeRR/8pOmyVtMJ9PXP1W5qFyKfVseOlBV/WIVEJE7aM8Tj/11Hm5PoLUdxxew9pskZZoes90JwMNJ52kaTQ/73cVQQsP8+MRxAYOTcIxhUPgSgCQwLOVHjHm7GsDAMeVtBENdD24dGpCBr6832zDMokgBJOEYk/h/wj5iOAOv/wHSyo4D');
    'fire': Result[N] := BitmapFromString(21, 5, 'meJyNjksKgzAURVfhBrrCNohY0/ipn6Sk1sYOYkscieAyvfAgZFSEM7iDe897IlciV0X5qO4aRKcNtO0gpaEM9NMCysP7Z4wbxxk4t6VplWUNv3UAHj+p695npT4+h4bpuyZJAQNJwo7/BISfgP41wYC5tUscC0CSsPMfGOj6+XJljMNwfEvQfAeikH3d');
    'air': Result[N] := BitmapFromString(21, 5, 'meJxdkOEKgkAQhF+5RMTU08zMMzM7Jc7i+hWCryX4IA0sDBLMj93b2+9mTqVapTo71suyisqyg9jW12dzs2whY1zffyDn5jDMo+gcJxeIF/JTUxSt1FVltB4A4bR7vIUwvqYgyEDAoUC2BJoBAeKovY8gYN3ar+8riCNApEAiKWDjLw6ygCCv7/YHz4s5EicQncDGNgt/Q9Z/QYPZpg==');
    'water': Result[N] := BitmapFromString(21, 5, 'meJxlztEKgkAQheGn6KqXLBExbTU1dc3MVpHV2K5C8DE7MDTELvy355sRiRSJTC9NlreoKLqy7FFdq22/o9q7Rt1j7p8vpJQZhjcyZgvDLIqu8blClsNzKcfmNv0jJMzLGgQpBEbE7xneUniGERIw1/rj+wIRAoERa+4KdP1wPHle7CLu3BJo/gWhnpVR');
    'earth': Result[N] := BitmapFromString(21, 5, 'meJyrreuoreuob+hsbOoGoubmXj7PXGLQpElz58xZUVHRWFXVUl3TBkREagSiiRPnALXPmLm0rKweaAIQEa8XiPonzAJqnz59cUlJLRBBDAE6A+KSWiQfAb3T2toPRO3tEzs6Jnd2Te3umd7bNwNie0FhZVFRNS5DkMMEzQSIdgAbzYL7');
    'body': Result[N] := BitmapFromString(21, 5, 'meJxNz1EKgkAUheE1+CD02BJLREwbzcwcM7MxYiympxBcjkvqwIFL8D8Mcudzrsq0ynR+aIpji8qyq6re83yk9QPx3F5tdxv7+xsZ44bhg5yb47hIklO6PyM6nKdT1waJIAiF8TVFUQ5BEE7yMRAE4ffm8oSwrFfM2q+cEQSOIdlI1gGCXSjgDfz7ZrsLgjQMFeJLgNAR4X8XEXj9B+4Xito=');
    'death': Result[N] := BitmapFromString(21, 5, 'meJx10N0KgkAQhuFr8KD7LBHxp9XM1DUzXSNWYzuKwNsSuhA/GBzCCN6DPZlnhhWRFJGMD2VyrFCa1tP04SxrQ4/qoutr37QPpJTpuicyZvS8JAhO4T5Hvw6NS3krz3cIjJDQD2/XjSEwIpZjvm8oCoUYIQHjWr8cRyBCIKwQOiPLGrQSaPt259t2SAivY+Tfn0Cg8RkVgLhI');
    'chaos': Result[N] := BitmapFromString(21, 5, 'meJyrreuoreuob+hsbOoGIukVD4Do4cMncMTp7gFEQAZECogmTpwzadJcIJozZ0VFRWNVVUt1TRsQwRVAdOHS3j9hFsSEGTOXlpXVA02AGEKk9t6+GUATgNqnT19cUlILRBBDkLVjIrhsd890oAkQ2wsKK4uKqiGGYGoXFBQFIjTtnV1TgSZAtAMAijK4aA==');
    'law': Result[N] := BitmapFromString(21, 5, 'meJx1j1sKgzAQRRfSv66wioiPRqvWGl9oLCVV4lcpdFldSi9cEAkUDuEyyZzMiESKRKaX+ns8ZHlbFH1ZDqCqFCqgbh5tpwHyMC44lTLTtAJjPkGQRdE1Pt8APJTQw3Z4pLwzU7IZnvPb91MYUKEEgcPAwJfWJAwYA+1avzxPABY3xG4jrmM9APz95ISuG1tXnGS/y7/2H/zlkkg=');
    'nature': Result[N] := BitmapFromString(21, 5, 'meJxlz8EOgjAQBNBv8OB/KiEEwYKIQLEiFkKKpp6MiZ/JxEn2oMnctvs6qzKtMp0f2rVZMVXVI01jtR6R9jyZi0M47W8Pa/0wPBHvP3FcJMkp3dcIHxRHg5RlR4QOR0C66yzCfH9HUQ5BED5DGQpEpBibUMC6c68wVAgRCETU9yI2+TlHBP6+2e6CIP1HpAYRuUUEri+OX5YH');
    'cosmic': Result[N] := BitmapFromString(21, 5, 'meJx10GEKgkAQBeCDeEkVEVNXM1PXLGwV2YrtVwSdSjpKDwaGgQrer7c73y6jCq0KXW77ajcg3vqmdJ3Rekb6wzIcLffj+WaMm6Y74twrSao03Wd5i8Dha3V9apoRCDlAvoXL9RnHJQRG+A4JEpFHEDBu7SOKlOx/BgIhsqTX/WAThtk/hHeCb8ge26DxD74Ds9c=');
    End;
  End;
End;

Procedure InitRuneBMPs();
//Var
Begin
  If Not LoggedIn Or InitlizedRuneBMPs Then Exit;

  RunesBMP := getConstRuneBMPs(Runes);
  ShopRunesBMP := getConstRuneBMPs(ShopRunes);

  InitlizedRuneBMPs := True;
End;

Procedure FreeRuneBMPs();
Var
N: Integer;
Begin
  For N := 0 to High(RunesBMP) Do
  Begin
    If BitmapExists(RunesBMP[N]) Then FreeBitmap(RunesBMP[N]);
  End;
  //
  For N := 0 to High(ShopRunesBMP) Do
  Begin
    If BitmapExists(ShopRunesBMP[N]) Then FreeBitmap(ShopRunesBMP[N]);
  End;
End;

// 0: Empty  (Else)

Function GetRunes(): Array of Array of Integer;
Var
  N, K, X, Y, DX, DY, R, C, G: Integer;
  TPA: TPointArray;
  TP: TPoint;
  Puzzles: Array of TIntegerArray;
Begin
  If Not (LoggedIn And SudokuScreen) Then Exit;
  //
  InitRuneBMPs;
  //
  G := Length(RunesBMP);
  //
  SetLength(Puzzles, G);
  For N := 0 to High(Puzzles) Do
  Begin
     SetLength(Puzzles[N], G);
  End;
  //
  Case LowerCase(PuzzleSize) Of
    'large': Begin
      X := PuzzleX1 - 5;
      Y := PuzzleY1 - 5;
      DX := BoxDistX;
      DY := BoxDistY;
    End;
    'small': Begin
      X := sPuzzleX1 - 5;
      Y := sPuzzleY1 - 5;
      DX := sBoxDistX;
      DY := sBoxDistY;
    End;
  End;
  //
  For N := 0 to High(RunesBMP) Do
  Begin
    If FindBitmapsSpiralTolerance(RunesBMP[N], X, Y, TPA, X, Y, X + G * DX, Y + G * DY, 15) Then
    Begin
      For K := 0 to High(TPA) Do
      Begin
        TP := TPA[K];
        For C := 1 to G Do
        Begin
           For R := 1 to G Do
           Begin
              If PointInBox(TP, IntToBox(X, Y, X + C * DX, Y + R * DY)) Then
              Begin
                Puzzles[R - 1][C - 1] := N + 1;
                R := G;
                C := G;
              End;
           End;
        End;
      End;
    End;
  End;
  Dev('Finished getting runes position');
  Result := Puzzles;
End;

Procedure RemovePossibleValues(R, C, V: Integer);
Var
  A, B: Integer;
Begin
  Case R Of
    0, 1, 2: Begin
      Case C Of
        0, 1, 2: Begin
          For A := 0 to 2 Do
            For B := 0 to 2 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        3, 4, 5: Begin
          For A := 0 to 2 Do
            For B := 3 to 5 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        6, 7, 8: Begin
          For A := 0 to 2 Do
            For B := 6 to 8 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
      End;
    End;
    3, 4, 5: Begin
      Case C Of
        0, 1, 2: Begin
          For A := 3 to 5 Do
            For B := 0 to 2 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        3, 4, 5: Begin
          For A := 3 to 5 Do
            For B := 3 to 5 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        6, 7, 8: Begin
          For A := 3 to 5 Do
            For B := 6 to 8 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
      End;
    End;
    6, 7, 8: Begin
      Case C Of
        0, 1, 2: Begin
          For A := 6 to 8 Do
            For B := 0 to 2 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        3, 4, 5: Begin
          For A := 6 to 8 Do
            For B := 3 to 5 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
        6, 7, 8: Begin
          For A := 6 to 8 Do
            For B := 6 to 8 Do
              If Not (PossibleValues[A][B][0] = 0) Then
                RemoveElement(PossibleValues[A][B], V);
        End;
      End;
    End;
  End;
End;

Function Contain(A: TIntegerArray; V: Integer): Boolean;
Var
  N: Integer;
Begin
  For N := 0 to High(A) Do
    If A[N] = V Then
    Begin
      Result := True;
      Exit;
    End;
End;

Procedure SinglePosition(R, C: Integer);
Var
  A: Integer;
Begin
  For A := 0 to 8 Do
    If Not (Puzzle[A][C] = 0) Then
      RemoveElement(PossibleValues[R][C], Puzzle[A][C]);

  For A := 0 to 8 Do
    If Not (Puzzle[R][A] = 0) Then
      RemoveElement(PossibleValues[R][C], Puzzle[R][A]);
End;

Procedure CandidateLines(Box: Integer);
Var
  A, B, N, N2, N3, N4, Count, XR, YR, H: Integer;
  CTP: TPointArray;
  BoxX, BoxY: TIntegerArray;
  AlreadySolved: Boolean;
Begin
  SetLength(CTP, 9);
  For N4 := 0 to 8 Do
    CTP[N4] := Point(-1, -1);
  SetLength(BoxX, 3);
  SetLength(BoxY, 3);
  Case Box Of
    0: Begin
      BoxX := [0, 1, 2];
      BoxY := [0, 1, 2];
    End;
    1: Begin
      BoxX := [0, 1, 2];
      BoxY := [3, 4, 5];
    End;
    2: Begin
      BoxX := [0, 1, 2];
      BoxY := [6, 7, 8];
    End;
    3: Begin
      BoxX := [3, 4, 5];
      BoxY := [0, 1, 2];
    End;
    4: Begin
      BoxX := [3, 4, 5];
      BoxY := [3, 4, 5];
    End;
    5: Begin
      BoxX := [3, 4, 5];
      BoxY := [6, 7, 8];
    End;
    6: Begin
      BoxX := [6, 7, 8];
      BoxY := [0, 1, 2];
    End;
    7: Begin
      BoxX := [6, 7, 8];
      BoxY := [3, 4, 5];
    End;
    8: Begin
      BoxX := [6, 7, 8];
      BoxY := [6, 7, 8];
    End;
  End;

  For N := 1 to 9 Do
  Begin
    AlreadySolved := False;
    For A := BoxX[0] to BoxX[2] Do
      For B := BoxY[0] to BoxY[2] Do
        If Puzzle[A][B] = N Then AlreadySolved := True;

    If Not AlreadySolved Then
    Begin
      Count := 0;
      SetLength(CTP, 9);
      For N4 := 0 to 8 Do
        CTP[N4] := point(-1, -1);
      For A := BoxX[0] to BoxX[2] Do
      Begin
        For B := BoxY[0] to BoxY[2] Do
        Begin
          If (Contain(PossibleValues[A][B], N)) Then
          Begin
            CTP[Count] := point(A, B);
            Count := Count + 1;
          End;
        End;
      End;
      If Count > 0 Then SetLength(CTP, Count);
      If ((Count = 2) Or (Count = 3)) Then
      Begin
        H := High(CTP);
        XR := CTP[0].X;
        YR := CTP[0].Y;
        For N2 := 1 to H Do
        Begin
          If Not (XR = CTP[N2].X) Then Break;
          If ((N2 = H) And (XR = CTP[H].X)) Then
          Begin
            For N3 := 0 to 8 Do
            Begin
              If Contain(BoxY, N3) Then Continue;
              RemoveElement(PossibleValues[XR][N3], N);
            End;
          End;
        End;
        For N2 := 1 to H Do
        Begin
          If Not (YR = CTP[N2].Y) Then Break;
          If ((N2 = H) And (YR = CTP[H].Y)) Then
          Begin
            For N3 := 0 to 8 Do
            Begin
              If Contain(BoxX, N3) Then Continue;
              RemoveElement(PossibleValues[N3][YR], N);
            End;
          End;
        End;
      End;
    End;
  End;
End;

Function SolveSudoku: Boolean;
Var
  N, R, C, B, T: Integer;
  Done: Boolean;
Begin
  If Not (LoggedIn And SudokuScreen) Then Exit;
  T := GetSystemTime;

  Dev(PuzzleSizeS);

  Case LowerCase(PuzzleSizeS) Of
    'small': Begin
      smallOrder := GetRunes();
      //Dev(toStr(smallOrder));

      If Not (smallOrder[1][1] = 0) Then
      Begin
        smallOrder[0][0] := smallOrder[2][2];
        smallOrder[0][1] := smallOrder[1][2];
        smallOrder[0][2] := smallOrder[1][1];
        smallOrder[0][3] := smallOrder[2][1];
        smallOrder[1][0] := smallOrder[2][1];
        smallOrder[1][3] := smallOrder[2][2];
        smallOrder[2][0] := smallOrder[1][1];
        smallOrder[2][3] := smallOrder[1][2];
        smallOrder[3][0] := smallOrder[1][2];
        smallOrder[3][1] := smallOrder[2][2];
        smallOrder[3][2] := smallOrder[2][1];
        smallOrder[3][3] := smallOrder[1][1];
      End Else If Not (smallOrder[1][0] = 0) Then
      Begin
        smallOrder[0][0] := smallOrder[1][3];
        smallOrder[0][1] := smallOrder[2][3];
        smallOrder[0][2] := smallOrder[2][0];
        smallOrder[0][3] := smallOrder[1][0];
        smallOrder[1][1] := smallOrder[2][0];
        smallOrder[1][2] := smallOrder[2][3];
        smallOrder[2][1] := smallOrder[1][0];
        smallOrder[2][2] := smallOrder[1][3];
        smallOrder[3][0] := smallOrder[2][3];
        smallOrder[3][1] := smallOrder[1][3];
        smallOrder[3][2] := smallOrder[1][0];
        smallOrder[3][3] := smallOrder[2][0];
      End Else If Not (smallOrder[0][0] = 0) Then
      Begin
        smallOrder[0][1] := smallOrder[3][0];
        smallOrder[0][2] := smallOrder[3][3];
        smallOrder[1][0] := smallOrder[0][3];
        smallOrder[1][1] := smallOrder[3][3];
        smallOrder[1][2] := smallOrder[3][0];
        smallOrder[1][3] := smallOrder[0][0];
        smallOrder[2][0] := smallOrder[3][3];
        smallOrder[2][1] := smallOrder[0][3];
        smallOrder[2][2] := smallOrder[0][0];
        smallOrder[2][3] := smallOrder[3][0];
        smallOrder[3][1] := smallOrder[0][0];
        smallOrder[3][2] := smallOrder[0][3];
      End Else
        Exit;

      Done := True;
      For R := 0 to 3 Do
        For C := 0 to 3 Do
          If smallOrder[R][C] = 0 Then Done := False;
    End;
    'large': Begin
      Puzzle := GetRunes();
      //Dev(toStr(Puzzle));

      For R := 0 To 8 Do
        For C := 0 To 8 Do
          If Puzzle[R][C] = 0 Then PossibleValues[R][C] := [1, 2, 3, 4, 5, 6, 7, 8, 9]
          Else Begin
            SetLength(PossibleValues[R][C], 1);
            PossibleValues[R][C] := [0];
          End;

      For N := 0 to 19 Do
      Begin
        For R := 0 to 8 Do
          For C := 0 to 8 Do
            If Not (Puzzle[R][C] = 0) Then
              RemovePossibleValues(R, C, Puzzle[R][C]);

        For R := 0 to 8 Do
          For C := 0 to 8 Do
            If ((Not Contain(PossibleValues[R][C], 0)) And (Length(PossibleValues[R][C]) = 1)) Then
            Begin
              Puzzle[R][C] := PossibleValues[R][C][0];
              SetLength(PossibleValues[R][C], 1);
              PossibleValues[R][C] := [0];
            End;

        {For R := 0 to 8 Do
          Writeln(Puzzle[S]);
        Writeln('Square');
        For R := 0 to 8 Do
          Writeln(PossibleValues[S]);
        Writeln('***********');  }

        For R := 0 to 8 Do
          For C := 0 to 8 Do
            If (Puzzle[R][C] = 0) Then
              SinglePosition(R, C);

        For R := 0 to 8 Do
          For C := 0 to 8 Do
            If ((Not Contain(PossibleValues[R][C], 0)) And (Length(PossibleValues[R][C]) = 1)) Then
            Begin
              Puzzle[R][C] := PossibleValues[R][C][0];
              SetLength(PossibleValues[R][C], 1);
              PossibleValues[R][C] := [0];
            End;

       { For R := 0 to 8 Do
          Writeln(Puzzle[S]);
        Writeln('Single Line');
        For R := 0 to 8 Do
          Writeln(PossibleValues[S]);
        Writeln('***********');    }

        For B := 0 to 8 Do
          CandidateLines(B);

        For R := 0 to 8 Do
          For C := 0 to 8 Do
            If ((Not Contain(PossibleValues[R][C], 0)) And (Length(PossibleValues[R][C]) = 1)) Then
            Begin
              Puzzle[R][C] := PossibleValues[R][C][0];
              SetLength(PossibleValues[R][C], 1);
              PossibleValues[R][C] := [0];
            End;

        {For R := 0 to 8 Do
          Writeln(Puzzle[S]);
        Writeln('Candidate');
        For R := 0 to 8 Do
          Writeln(PossibleValues[S]);}

        {For R := 0 to 8 Do
          For C := 0 to 8 Do
            Writeln(PossibleValues[R][C]);

        Writeln('---------------------'); }

        Done := True;
        For R := 0 to 8 Do
        Begin
          For C := 0 to 8 Do
          Begin
            If Puzzle[R][C] = 0 Then Done := False;
          End;
        End;

        If Done Then Break;
      End;
    End;
    Else
      EndScript('Wrong size of puzzle entered');
  End;
  Dev('Completed Solve in ' + IntToStr(GetSystemTime - T) + ' milliseconds.');
  If Done Then Result := True;
End;

Function PlaceRunes: Boolean;
Var
  N, A, B, T, X, Y, Z: Integer;
  TP: TPoint;
  BRune: TPointArray;
  PlaceMouseSpeed: Integer;
Begin
  If Not (LoggedIn And SudokuScreen) Then Exit;

  Dev('Placing runes into puzzle');

  PlaceMouseSpeed := Reflect.MouseSpeed;

  Reflect.MouseSpeed := RandomRange(Round(S_MouseSpeed * 2.25), Round(S_MouseSpeed * 2.50));

  Case LowerCase(PuzzleSizeS) Of
    'small': Begin
      SetLength(Brune, 5);
      T := GetSystemTime + RandomRange(30000, 45000);

      TP := Point(55, 0);
      For N := 1 to 4 Do
      Begin
         Brune[N] := Point(30 + TP.X * (N -1), 310 + TP.Y * (N -1));
      End;
      //Writeln(Brune);
      //
      For N := 1 to 4 Do
      Begin
        If GetSystemTime > T Then Exit;
        Mose(BRune[N], 5, 5, True);
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
        For A := 0 to 3 Do
          For B := 0 to 3 Do
            If smallOrder[A][B] = N Then
            Begin
              X := sPuzzleX1 + B * sBoxDistX + 16;
              Y := sPuzzleY1 + A * sBoxDistY + 16;
              If Not((CountColorTolerance(C_YELLOWBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 300) or
                     (CountColorTolerance(C_ORANGEBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 300)) Then Continue;
              Mose(Point(X, Y), 5, 5, True);
              Wat(W1, Round(Multi * W1));
            End;
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
      End;
      Result := True;

      If Result Then
      Begin
        Dev('Solved Small Puzzle Correctly. Opening Casket.');
        Wat(300, 500);
        Mose(Point(325, 315), 20, 3, True);
      End;
    End;
    'large': Begin
      SetLength(BRune, 10);
      T := GetSystemTime + RandomRange(75000, 120000);

      TP := Point(50, 50);
      Z := 1;
      For N := 1 to 9 Do
      Begin
         If Floor(N / 6) > 0 Then Z := -1;
         Brune[N] := Point(30 + TP.X * Floor(N / 6), 110 + TP.Y * ((N - 6 * Floor(N / 6)) - Z));
      End;
      //Writeln(Brune);
      //
      For N := 1 to 9 Do
      Begin
        If GetSystemTime > T Then Exit;
        Mose(BRune[N], 5, 5, True);
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
        For A := 0 to 8 Do
          For B := 0 to 8 Do
            If (Puzzle[A][B] = N) Then
            Begin
              X := PuzzleX1 + B * BoxDistX + 15;
              Y := PuzzleY1 + A * BoxDistY + 15;
              If Not((CountColorTolerance(C_YELLOWBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 400) or
                     (CountColorTolerance(C_ORANGEBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 400)) Then Continue;
              Mose(Point(X, Y), 5, 5, True);
              Wat(W1, Round(Multi * W1));
            End;
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
      End;
      Result := True;

      If Result Then
      Begin
        Dev('Solved Large Puzzle Correctly. Opening Casket.');
        Wat(300, 500);
        Mose(Point(45, 65), 20, 3, True);
      End;
    End;
    Else
      EndScript('Wrong Size Puzzle Specified');
  End;

  Reflect.MouseSpeed := PlaceMouseSpeed;

  T := GetSystemTime + RandomRange(3500, 5000);
  Repeat
    Wat(250, 500);
    If GetSystemTime > T Then
    Begin
      Result := False;
    End;
  Until Not SudokuScreen
End;

Function CollectRunes: Boolean;
Var
  N, J, T, D, Q: Integer;
  TPA: TPointArray;
  TP, StoreX: TPoint;
Begin
  If Not LoggedIn Or SudokuScreen Then Exit;
  Dev('Collecting Runes');
  //
  StoreX :=Point(485, 40);
  //
  T := GetSystemTime + RandomRange(3500, 5000);
  Repeat
    Wat(5, 10);
    If GetSystemTime > T Then Exit;
  Until Chat(['Find out', 'ind', 'out', 'at'], True);
  //
  Mose(StoreX, 2, 2);
  T := GetSystemTime + RandomRange(3500, 5000);
  Repeat
    Wat(50, 100);
    If GetSystemTime > T Then Exit;
  Until Reflect.Text.IsUpText('Close');
  //
  T := GetSystemTime + RandomRange(60000, 65000);
  D := 30;
  For N := 0 to High(ShopRunesBMP) Do
  Begin
    While FindBitmapsSpiralTolerance(ShopRunesBMP[N], MSX1, MSY1, TPA, MSX1 + D, MSY1 + D, MSX2 - D, MSY2 - D, 10) Do
    Begin
       //
       For J := 0 to High(TPA) Do
       Begin
         TP := TPA[J];
         Q := StoreQuantity(TP);
         Dev('We can buy ' + toStr(Q) + ' ' + Runes[N] + ' rune from store now');
         Repeat
           If GetSystemTime > T Then Exit;
           If Reflect.Chat.Find('enough') Then EndScript('Ran out of money');
           If Reflect.Bank.IsOpen Then MyPlayer.EnterPin();
           //
           Mose(TP, 2, 2, False);
           Wat(5, 10);
           Reflect.Text.ChooseOption(toStr(Q_STORE_BUY));
           Q := Q - Q_STORE_BUY;
         Until 1 > Q;
       End;
    End;
  End;

  Mose(StoreX, 2, 2);
  T := GetSystemTime + RandomRange(3500, 5000);
  Repeat
    Wat(5, 10);
    If Reflect.Text.IsUpText('Close') Then
    Begin
       Mose(StoreX, 2, 2, True);
       Break;
    End;
  Until GetSystemTime > T;

  Result := True;
  If Result Then
    Dev('Bought runes')
  Else
    Dev('Couldnt buy runes');
End;

Procedure VariableReset;
Var
  A, B: Integer;
Begin
  Solved := False;
  SetLength(Puzzle, 9);
  For A := 0 To 8 Do
    SetLength(Puzzle[A], 9);

  SetLength(PossibleValues, 9);
  For A := 0 To 8 Do
  Begin
    SetLength(PossibleValues[A], 9);
    For B := 0 to 8 Do
      SetLength(PossibleValues[A][B], 9);
  End;
End;

Procedure SetVariables;
Var
  A, B: Integer;
begin
  TimeToBreak := GetSystemTime + (330 * 60 * 1000) + RandomRange((-5 * 60 * 1000), (5 * 60 * 1000));
  StartTime := GetSystemTime;

  Solved := False;
  InitlizedRuneBMPs := False;

  BoxDistX := 37;
  BoxDistY := 37;
  sBoxDistX := 51;
  sBoxDistY := 52;

  PuzzleX1 := 118;
  PuzzleY1 := 8;
  sPuzzleX1 := 164;
  sPuzzleY1 := 57;

  Case LowerCase(PuzzleSize) Of
    'large': Begin
      PuzzleSizeS := 'large';
      Runes := RUNES_LARGE;
      ShopRunes := SHOP_RUNES_LARGE;
      SetLength(Puzzle, 9);
      For A := 0 To 8 Do
        SetLength(Puzzle[A], 9);

      SetLength(PossibleValues, 9);
      For A := 0 To 8 Do
      Begin
        SetLength(PossibleValues[A], 9);
        For B := 0 to 8 Do
          SetLength(PossibleValues[A][B], 9);
      End;
    End;
    'small': Begin
      PuzzleSizeS := 'small';
      Runes := RUNES_SMALL;
      ShopRunes := SHOP_RUNES_SMALL;
      SetLength(smallOrder, 4);
      For A := 0 to 3 Do
        SetLength(smallOrder[A], 4);
    End;
    Else EndScript('Puzzle size entered incorrectly');
  End;

  AddOnTerminate('FreeRuneBMPs');
end;

Procedure ScriptSetup;
begin
  //smartInitSeq := 's';  // Safe Mode
  Reflect.Setup;                   // Load the Reflection include files
  If Not DebugMode Then Reflect.Logger.Init('Reflection', TReflectLoggerLevel.Error);
  ClearDebug;               // Clear the debug box
  Reflect.MouseSpeed := S_MouseSpeed;
  DeclarePlayer;
end;

Begin
  ScriptSetup;
  SetVariables;

  if (not LogMeIn) then EndScript('Could not login pre-loop');

  Repeat
    if (not LogMeIn) then EndScript('Could not login in-loop');

    //if BreakTime then TakeBreak;

    if PopUps Then Wat(500, 750);

    VariableReset;

    If TalkToAli Then
    Begin
      If SolveSudoku Then
      Begin
        If PlaceRunes Then
        Begin
          If CollectRunes Then
          Begin
            Solved := True;
          End Else Begin
            Solved := False;
            FailCount(False, 'Could not collect runes');
          End;
        End Else Begin
          FailCount(False, 'Could not place runes');
        End;
      End Else Begin
        FailCount(False, 'Could not solve the puzzle');
      End;
    End Else Begin
      FailCount(False, 'Could not talk to Ali');
    End;

    If Solved Then
    Begin
      FailCount(True, '');
      PuzzlesSolved := PuzzlesSolved + 1;
      Report;
      SwichWorld;
    End;
  Until False;
  TerminateScript;
End.
