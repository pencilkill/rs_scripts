/////////////////////////////////////////////
//////                                 //////
//             Sudoku Solver               //
//                                         //
//           -= Version 2.09 =-            //
//                                         //
// --------------------------------------- //
//                                         //
//           *Instructions*                //
//                                         //
//  + Fill out account setup               //
//  + Start east of Ali                    //
//  + Run the script                       //
//                                         //
/////////////////////////////////////////////
program SudokuSolver;                      //
{$DEFINE SMART}
{$I SRL-OSR/SRL.SIMBA}
{$I SRL-OSR/SRL/misc/debug.SIMBA}          //
{$I SRL-OSR/ws/lib.SIMBA}                  //
/////////////////////////////////////////////
//===========================================
//===== Setup =======================
const
  Ver = 'V2.09';

//===== Account Setup =======================
  AccountLogin = 'dfjkdfjd@yahoo.com';        // Runescape Account Login
  AccountPassword = 'shan123';     // Runescape Account Password
  AccountPIN = '';          // Runescape Bank Pin
//===========================================

//===== Script Setup =======================
  PuzzleSize = 'Large';     // Large: Need ~2M/hr, Small: Need ~100k/hr
  DebugMode = False;        // Debug script ?
  RepositionMode = false;       // Attempt to reposition to find Ali ?
  TakeBreakMode = false;    // Take for a break ?
  S_MouseSpeed = 65;       // SRL's MouseSpeed, the bigger the faster. Default : 15
  S_World = [348];             // World you would NOT like to be logged into

  W1 = 50;        // Wait between placing each rune on the puzzle
  //  Optimal Values:
  //  - 5:  Incredibly Fast
  //  - 50: Human-like

  W2 = 1000;       // Wait between picking each rune to place
  //  Optimal Values:
  //  - 50:  Incredibly Fast
  //  - 1000: Human-like

  Multi = 1.2;   // (Multiplier for random wait times)
  //  Wait(RandomRange(W1, Round(Multi * W1)));
  //  1.2: The lowest you should go
  //  2.0: The highest you should go
//===========================================

//===========================================
//===== Don't Edit Any Further ==============
//===========================================

var
  TimeToBreak, StartTime: Integer;
  S_TR: Extended;

  F_Count: Integer;
  F_String: String;
  Solved, InitlizedRuneBMPs: Boolean;

  Puzzle: Array of Array of Integer;
  PuzzleSizeS: String;
  PossibleValues: Array of Array of Array of Integer;
  PuzzlesSolved: Integer;
  BoxDistX, BoxDistY, sBoxDistX, sBoxDistY: Integer;
  PuzzleX1, PuzzleY1, sPuzzleX1, sPuzzleY1: Integer;
  smallOrder: Array of TIntegerArray;

  Runes, ShopRunes: Array of String;
  RunesBMP, ShopRunesBMP: Array of Integer;
  Worlds: TIntegerArray;
  WorldBoxes: TBoxArray;

const
  C_YELLOWBLOCK = 114921;
  C_ORANGEBLOCK = 498170;
  Q_STORE_BUY = 10; // Quantity runes buy from store per

  RUNES_LARGE = ['Mind', 'Fire', 'Air', 'Water', 'Earth', 'Body', 'Death', 'Chaos', 'Law'];  // This is ordered from place runes !
  RUNES_SMALL = ['Earth', 'Water', 'Air', 'Fire'];
  SHOP_RUNES_LARGE = ['Nature', 'Cosmic', 'Death'];
  SHOP_RUNES_SMALL = ['Earth', 'Water', 'Air', 'Fire'];

  DTM_CACTUS = 'm6wAAAHic42ZgYChiYmDwAeJgIPYC4hAgzgLidCCeBcTLgLgBiBOAOBqovhqI' +
               'm6AYxK4C4mIg9gViCyCuA+I+IJ7RksIQ6qIKxj8+fgHj8PBQBkcHRwavPGMU/' +
               'B+oXoRIzAjEzERiJAAAjREZog==';
//==============================================================================
//===== Main.simba Include =====================================================
//==============================================================================
procedure DeclarePlayers;
begin
  NumberOfPlayers(1);
  CurrentPlayer := 0;
  With Players[0] do
  begin
    Name        := AccountLogin;
    Pass        := AccountPassword;
    PIN         := AccountPIN;
    Active      := True;
    Member      := True;
  end;
  SRL_DisableIPLog := True;
end;

procedure Debug(Message: String);
begin
  if DebugMode then Writeln(Message);
end;

function StoreScreen: Boolean;
var
  X, Y: Integer;
begin
  result := FindText(x, y, 'store', upChars07, 92, 25, 396, 54);
end;

function CloseStore: Boolean;
var
T: Integer;
StoreX: TPoint;
begin
  if StoreScreen then
  begin
    T := GetSystemTime + RandomRange(1500, 2500);
    Mose(485, 40, 2, 2, True);
    repeat
      Wat(50, 100);
      if (GetSystemTime > T) then Exit;
    until Not StoreScreen;
  end;

  result := True;
end;

function StoreQuantity(P: TPoint) : Integer;
var
T2DPA: T2DPointArray;
TPA: TPointArray;
B: TBox;
begin
  if (FindColorsTolerance(TPA, clYellow, MSX1 , Min(MSY1, P.Y - 50), MSX2, P.Y, 10)) then
  begin
    T2DPA := ClusterTPA(TPA, 3);
    SortATPAFromMidPoint(T2DPA, P);
    TPA := T2DPA[Low(T2DPA)];
    B := GetTPABounds(TPA);
    result := StrToInt(GetTextAtEx(B.X1 - 1, B.Y1 - 1, B.X2 + 1, B.Y2 + 1, 0, 3, 15, clYellow, 10, StatChars07));
  end;
end;

function RandomOneWorld(): Integer;
var
  l : Integer;
begin
  l := Length(Worlds);
  repeat
    result := Worlds[Random(l)];
  until result > 0;
end;

function SelectWorld(World: Integer): Boolean; override;
// '0' for unsupport world
var
  I, T: Integer;
  TB: TBox;
begin
  if not InIntArrayEx(Worlds, I, World) then exit(false);
  TB := WorldBoxes[I];
  if IsWorldFull(TB) then exit(false);
  mousebox(TB.X1 + 5, TB.Y1 + 3, TB.X2 - 5, TB.Y2 - 3, mouse_Left);
  T := GetSystemTime + RandomRange(5000, 5500);
  while (WorldScreen) and (T < GetSystemTime) do
    Wait(RandomRange(100, 200));
  result := (not WorldScreen);
end;

function SwichWorld(): Boolean;
var
W, T, S: Integer;
begin
  repeat
    // ensure world screen
    if LoggedIn then LogMeOut;

    T := GetSystemTime + RandomRange(5000, 5500);
    repeat
      wat(300, 500);
      if LobbyScreen then
      begin
        result := LobbyLogin;
        exit;
      end;
      if not loggedin then Break;
    until GetSystemTime > T;
    // switch world
    T := GetSystemTime + RandomRange(10000, 12000);
    repeat
      if OpenWorldScreen then
      begin
        if not WorldsOrdered then OrderWorlds;
        WorldReader(Worlds, worldBoxes, ['member']);
        repeat
          W := RandomOneWorld();
        until not InIntArray(S_World, W);
        SelectWorld(W);
      end;
      if GetSystemTime > T then break;
    until CurrentWorldLS = W;

    Debug('Trying select world [' + IntToStr(W) + '] switched to world [' + IntToStr(CurrentWorldLS) + '].');

    if CurrentWorldLS = W then
    begin
      if Length(Players[CurrentPlayer].WorldInfo) > 0 then
        Players[CurrentPlayer].WorldInfo[0]:=W;

      LoginPlayer;
    end;
  until LoggedIn;

  result := True;
end;

function CustomLogin: Boolean;
var
T: Integer;
begin
  if LoggedIn then
  begin
    result := true;
    exit;
  end;
  //
  if LobbyScreen then
  begin
    result := LobbyLogin;
    exit;
  end;

  result := SwichWorld;
end;

function LogMeIn: Boolean;
begin
  result := DoCondition(30000, 3000, @CustomLogin, @LoggedIn, True);
  SetAngle(SRL_ANGLE_HIGH);
end;

function GetPrice(ItemName: String; ID: Integer): Integer;
var
  TempString: String;
  TempData: Variant;
begin
  TempString := UpperCase(Copy(ItemName, 1, 1)) + LowerCase(Copy(ItemName, 2, Length(ItemName)));
  TempData := GetNumbers(Between('<td class="price">', '<', Between('?obj=' + IntToStr(ID) + '">' + TempString + '</a>', '</tr>', Getpage('http://itemdb-rs.runescape.com/results.ws?query=' + TempString))));
  if not (TempData = '') then TempData := StrToInt(TempData);
  if VarType(TempData) = varInteger then
    result := TempData
  else
    result := 0;
end;
//==============================================================================
//===== Main.simba Include =====================================================
//==============================================================================

procedure Report;
begin
  S_TR := S_TR + (GetSystemTime - StartTime);
  StartTime := GetSystemTime;
  if (not DebugMode) then ClearDebug;
  Writeln('____________Smurgs OSR SudokuSolver ' + Ver + '____________');
  Writeln('');
  Writeln('Puzzles Solved: ' + ToStr(PuzzlesSolved) + ' (' + ToStr(PuzzlesSolved / (S_TR / 1000.0 / 60.0 / 60.0)) + ' puzzles/hr)');
  Writeln('Time running: ' + MSToTime(Round(S_TR), 0));
  if TakeBreakMode then
    Writeln('Time until break: ' + MSToTime(TimeToBreak - GetSystemTime, 0));
  Writeln('_________________________________________________');
end;

procedure EndScript(Message: String);
begin
  CloseWindow;
  DoCondition(30000, 5000, @Logout, @LoggedIn, false);
  Report;
  Writeln(Message);
  terminateScript;
end;

function BreakTime: Boolean;
begin
  result := (GetSystemTime > TimeToBreak);
end;

function PopUps: Boolean;
begin
  if Not LoggedIn then Exit;
  result := (CountColorTolerance(5382947, 300, 80, 505, 300, 25) > 1500);
  if result then
  begin
    Mose(498, 69, 1, 1, True);
  end;
end;

procedure TakeBreak;
begin
  Writeln('Time for a break');
  S_TR := S_TR + (GetSystemTime - StartTime);

  CloseWindow;
  DoCondition(30000, 5000, @Logout, @LoginPlayerToLob, True);
  Wait(RandomRange(30 * 1000, 60 * 1000));
  DoCondition(30000, 5000, @CustomLogin, @LoggedIn, True);
  TimeToBreak := GetSystemTime + (845 * 60 * 1000) + RandomRange((-5 * 60 * 1000), (5 * 60 * 1000));

  StartTime := GetSystemTime;
end;

procedure FailCount(Reset: Boolean; FType: String);
begin
  if Reset then
  begin
    F_Count := 0;
    F_String := '';
    Debug('Reset Fail Count');
  end else begin
    F_Count := F_Count + 1;
    F_String := F_String + FType +  '. ';
    Debug('Added 1 to Fail Count');
  end;

  if F_Count > 7 then EndScript(F_String);
end;

function SudokuScreen: Boolean;
begin
  result := GetColor(512, 335) = 797794;
  //if result then Debug('In Sudoku Screen') else Debug('Not In Sudoku Screen');
end;

function OpenCasket(): Boolean;
var
  x, y: Integer;
begin
  if SudokuScreen And FindTextEx(x, y, ['open casket'], [SmallChars07], MSX1, MSY1, MSX2, MSY2) then
  begin
    Mose(x + 30, y + 10, 10, 2, True);
  end;
  result := True;
end;

function ClosePuzzle: Boolean;
var
  N, T: Integer;
begin
  if Not (LoggedIn And SudokuScreen) then Exit;
  N := 0;
  repeat
    if LowerCase(PuzzleSizeS) = 'large' then
    begin
      Mose(22, 22, 2, 2, True);
    end else if LowerCase(PuzzleSizeS) = 'small' then
    begin
      Mose(496, 23, 2, 2, True);
    end;
    T := GetSystemTime + 5000;
    repeat
      if GetSystemTime > T then Break;
      Wat(10, 25);
    until Not SudokuScreen
    if N > 3 then Exit;
    Inc(N);
  until Not SudokuScreen;
  result := True;
end;

function RepositionAli: Boolean;
var
  D, T, X, Y: Integer;
  Ang: Extended;
begin
  D := DTMFromString(DTM_CACTUS);
  if FindDTMRotated(D, X, Y, MMX1, MMY1, MMX2, MMY2, 0, 360, 0.005, Ang) then
  begin
    Writeln(Ang);
    Mose(X, Y, 0, 0, True);
    Flag;
    T := GetSystemTime + 5000;
    repeat
      if GetSystemTime > T then Break;
      Wat(10, 25);
    until Not IsMoving;
    result := True;
  end;
  FreeDTM(D);
end;

function FindAli(): Boolean;
var
  arP, arAP: TPointArray;
  arC, arUC: TIntegerArray;
  ararP: T2DPointArray;
  tmpCTS, i, j, arL, arL2, ax, ay: Integer;
  P: TPoint;
  X, Y, Z: Extended;
  B: Boolean;
begin
  tmpCTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(1.51, 0.11);
  B := FindColorsTolerance(arP, 13094084, MSX1, MSY1, MSX2, MSY2, 18);
  ColorToleranceSpeed(tmpCTS);
  SetColorSpeed2Modifiers(0.2, 0.2);
  if not B then
  begin
    Debug('Failed to find the color, no object found.');
    Exit;
  end;

  arC := GetColors(arP);
  arUC := arC;
  ClearSameIntegers(arUC);
  arL := High(arUC);
  arL2 := High(arC);

  for i := 0 to arL do
  begin
    ColorToXYZ(arC[i], X, Y, Z);

    if (X >= 33.13) and (X <= 85.51) and (Y >= 35.35) and (Y <= 89.77) and (Z >= 33.91) and (Z <= 99.20) then
    begin
      for j := 0 to arL2 do
      begin
        if (arUC[i] = arC[j]) then
        begin
          SetLength(arAP, Length(arAP) + 1);
          arAP[High(arAP)] := arP[j];
        end;
      end;
    end;
  end;

  SortTPAFrom(arAP, Point(MSCX, MSCY));
  ararP := SplitTPAEx(arAP, 10, 10);
  arL := High(ararP);

  for i := 0 to arL do
  begin
    if (Length(ararP[i]) < 10) then Continue;
    P := MiddleTPA(ararP[i]);
    MMose(P.x, P.y, 2, 2);
    GetMousePos(ax, ay);
    if WaitUpTextMulti(['alk-to Ali', 'o Ali', 'o Al', 'k-t'], 1000 + RandomRange(200, 500)) then
    begin;
      Mose(ax, ay, 2, 2, false);
      if WaitOptionMulti(['alk-to Ali', 'o Ali', 'o Al', 'k-t'],  1000 + RandomRange(200, 500)) then
      begin
        result := True;
        Break;
      end;
    end;
  end;

  if (i = arL + 1) then
  begin
    Debug('Could not find Ali ...');
    Exit;
  end;
end;

function TalkToAli: Boolean;
var
  ATPA: Array of TPointArray;
  TPA: TPointArray;
  TP: TPoint;
  Found: Boolean;
  N, T, T2, X, Y: Integer;
  ChatText: Array of String;
begin
  if Not LoggedIn then Exit;

  CloseStore;
  ClosePuzzle;

  Found := false;

  Debug('Starting to talk to Ali');

  T := GetSystemTime + RandomRange(10000, 15000);
  repeat
    if FindAli then
    begin
      Found := True;
      Flag;
    end;
    //
    if Not Found then
    begin
      FailCount(false, 'Could not find Ali');
      Wat(1000, 2000);
      if RepositionMode then
        if Not RepositionAli then
          FailCount(false, 'Could not reposition');
      MakeCompass(rs_GetCompassAngleDegrees + 90);
      Continue;
    end;

    if GetSystemTime > T then Exit;
  until Found;

  T := GetSystemTime + RandomRange(50000, 60000);
  Debug('Walking through Ali chat');
  repeat
    Wat(5, 10);
    if GetSystemTime > T then Exit;
  until FindNPCChatText('ventur', Nothing);
  T := GetSystemTime + RandomRange(50000, 60000);

  repeat
    Wat(5, 10);
    ClickContinueEx(True, false);
    if GetSystemTime > T then Exit;
  until FindNPCChatText('ow', Nothing);

  T := GetSystemTime + RandomRange(50000, 60000);

  if FindNPCChatText('omb', Nothing) then
    FindNPCChatText('ow', ClickLeft);

  ChatText := ['unes', '', 'amin'];
  if (LowerCase(PuzzleSizeS) = 'large') then
    ChatText[1] := 'arge'
  else
    ChatText[1] := 'mall';
  for N := 0 to (Length(ChatText) - 1) do
  begin
    T2 := GetSystemTime + RandomRange(15000, 20000);
    repeat
      if FindNPCChatText('omb', Nothing) then
        FindNPCChatText('ow', ClickLeft);
      ClickContinueEx(True, false);
      Wat(5, 10);
      if (GetSystemTime > T2) or (GetSystemTime > T) then Exit;
    until FindNPCChatText(ChatText[N], ClickLeft);
    T := GetSystemTime + RandomRange(50000, 60000);
  end;

  repeat
    if GetSystemTime > T then Exit;
    result := SudokuScreen;
    Wat(5, 10);
  until result;
  Wat(250, 500);
  Debug('Finished talking to Ali. In Sudoku Puzzle');
end;

procedure RemoveElement(var A: TIntegerArray; ToRemove: Integer);
var
  N, AHigh: Integer;
  Swapped: Boolean;
begin
  AHigh := High(A);
  for N := 0 to AHigh do
    if A[N] = ToRemove then
    begin
      Swap(A[N], A[AHigh]);
      Swapped := True;
    end;
  if Swapped then SetLength(A, AHigh);
end;

function getConstRuneBMPs(PrefixNames: Array of String) :Array of Integer;
var
N: Integer;
begin
  SetLength(result, Length(PrefixNames));
  //
  for N := 0 to High(PrefixNames) do
  begin
    case LowerCase(PrefixNames[N]) Of
    'mind': result[N] := BitmapFromString(21, 5, 'meJxNkEEOgjAQRdeewQPJcZQQgmBBRGQQEYshRVNXxsRjeRR/8pOmyVtMJ9PXP1W5qFyKfVseOlBV/WIVEJE7aM8Tj/11Hm5PoLUdxxew9pskZZoes90JwMNJ52kaTQ/73cVQQsP8+MRxAYOTcIxhUPgSgCQwLOVHjHm7GsDAMeVtBENdD24dGpCBr6832zDMokgBJOEYk/h/wj5iOAOv/wHSyo4D');
    'fire': result[N] := BitmapFromString(21, 5, 'meJyNjksKgzAURVfhBrrCNohY0/ipn6Sk1sYOYkscieAyvfAgZFSEM7iDe897IlciV0X5qO4aRKcNtO0gpaEM9NMCysP7Z4wbxxk4t6VplWUNv3UAHj+p695npT4+h4bpuyZJAQNJwo7/BISfgP41wYC5tUscC0CSsPMfGOj6+XJljMNwfEvQfAeikH3d');
    'air': result[N] := BitmapFromString(21, 5, 'meJxdkOEKgkAQhF+5RMTU08zMMzM7Jc7i+hWCryX4IA0sDBLMj93b2+9mTqVapTo71suyisqyg9jW12dzs2whY1zffyDn5jDMo+gcJxeIF/JTUxSt1FVltB4A4bR7vIUwvqYgyEDAoUC2BJoBAeKovY8gYN3ar+8riCNApEAiKWDjLw6ygCCv7/YHz4s5EicQncDGNgt/Q9Z/QYPZpg==');
    'water': result[N] := BitmapFromString(21, 5, 'meJxlztEKgkAQheGn6KqXLBExbTU1dc3MVpHV2K5C8DE7MDTELvy355sRiRSJTC9NlreoKLqy7FFdq22/o9q7Rt1j7p8vpJQZhjcyZgvDLIqu8blClsNzKcfmNv0jJMzLGgQpBEbE7xneUniGERIw1/rj+wIRAoERa+4KdP1wPHle7CLu3BJo/gWhnpVR');
    'earth': result[N] := BitmapFromString(21, 5, 'meJyrreuoreuob+hsbOoGoubmXj7PXGLQpElz58xZUVHRWFXVUl3TBkREagSiiRPnALXPmLm0rKweaAIQEa8XiPonzAJqnz59cUlJLRBBDAE6A+KSWiQfAb3T2toPRO3tEzs6Jnd2Te3umd7bNwNie0FhZVFRNS5DkMMEzQSIdgAbzYL7');
    'body': result[N] := BitmapFromString(21, 5, 'meJxNz1EKgkAUheE1+CD02BJLREwbzcwcM7MxYiympxBcjkvqwIFL8D8Mcudzrsq0ynR+aIpji8qyq6re83yk9QPx3F5tdxv7+xsZ44bhg5yb47hIklO6PyM6nKdT1waJIAiF8TVFUQ5BEE7yMRAE4ffm8oSwrFfM2q+cEQSOIdlI1gGCXSjgDfz7ZrsLgjQMFeJLgNAR4X8XEXj9B+4Xito=');
    'death': result[N] := BitmapFromString(21, 5, 'meJx10N0KgkAQhuFr8KD7LBHxp9XM1DUzXSNWYzuKwNsSuhA/GBzCCN6DPZlnhhWRFJGMD2VyrFCa1tP04SxrQ4/qoutr37QPpJTpuicyZvS8JAhO4T5Hvw6NS3krz3cIjJDQD2/XjSEwIpZjvm8oCoUYIQHjWr8cRyBCIKwQOiPLGrQSaPt259t2SAivY+Tfn0Cg8RkVgLhI');
    'chaos': result[N] := BitmapFromString(21, 5, 'meJyrreuoreuob+hsbOoGIukVD4Do4cMncMTp7gFEQAZECogmTpwzadJcIJozZ0VFRWNVVUt1TRsQwRVAdOHS3j9hFsSEGTOXlpXVA02AGEKk9t6+GUATgNqnT19cUlILRBBDkLVjIrhsd890oAkQ2wsKK4uKqiGGYGoXFBQFIjTtnV1TgSZAtAMAijK4aA==');
    'law': result[N] := BitmapFromString(21, 5, 'meJx1j1sKgzAQRRfSv66wioiPRqvWGl9oLCVV4lcpdFldSi9cEAkUDuEyyZzMiESKRKaX+ns8ZHlbFH1ZDqCqFCqgbh5tpwHyMC44lTLTtAJjPkGQRdE1Pt8APJTQw3Z4pLwzU7IZnvPb91MYUKEEgcPAwJfWJAwYA+1avzxPABY3xG4jrmM9APz95ISuG1tXnGS/y7/2H/zlkkg=');
    'nature': result[N] := BitmapFromString(21, 5, 'meJxlz8EOgjAQBNBv8OB/KiEEwYKIQLEiFkKKpp6MiZ/JxEn2oMnctvs6qzKtMp0f2rVZMVXVI01jtR6R9jyZi0M47W8Pa/0wPBHvP3FcJMkp3dcIHxRHg5RlR4QOR0C66yzCfH9HUQ5BED5DGQpEpBibUMC6c68wVAgRCETU9yI2+TlHBP6+2e6CIP1HpAYRuUUEri+OX5YH');
    'cosmic': result[N] := BitmapFromString(21, 5, 'meJx10GEKgkAQBeCDeEkVEVNXM1PXLGwV2YrtVwSdSjpKDwaGgQrer7c73y6jCq0KXW77ajcg3vqmdJ3Rekb6wzIcLffj+WaMm6Y74twrSao03Wd5i8Dha3V9apoRCDlAvoXL9RnHJQRG+A4JEpFHEDBu7SOKlOx/BgIhsqTX/WAThtk/hHeCb8ge26DxD74Ds9c=');
    end;
  end;
end;

procedure InitRuneBMPs();
//var
begin
  if Not LoggedIn Or InitlizedRuneBMPs then Exit;

  RunesBMP := getConstRuneBMPs(Runes);
  ShopRunesBMP := getConstRuneBMPs(ShopRunes);

  InitlizedRuneBMPs := True;
end;

procedure FreeRuneBMPs();
var
N: Integer;
begin
  for N := 0 to High(RunesBMP) do
  begin
    if BitmapExists(RunesBMP[N]) then FreeBitmap(RunesBMP[N]);
  end;
  //
  for N := 0 to High(ShopRunesBMP) do
  begin
    if BitmapExists(ShopRunesBMP[N]) then FreeBitmap(ShopRunesBMP[N]);
  end;
end;

// 0: Empty  (else)
function GetRunes(): Array of Array of Integer;
var
  N, K, X, Y, DX, DY, R, C, G: Integer;
  TPA: TPointArray;
  TP: TPoint;
  Puzzles: Array of TIntegerArray;
begin
  if Not (LoggedIn And SudokuScreen) then Exit;
  //
  InitRuneBMPs;
  //
  G := Length(RunesBMP);
  //
  SetLength(Puzzles, G);
  for N := 0 to High(Puzzles) do
  begin
     SetLength(Puzzles[N], G);
  end;
  //
  case LowerCase(PuzzleSize) Of
    'large': begin
      X := PuzzleX1 - 5;
      Y := PuzzleY1 - 5;
      DX := BoxDistX;
      DY := BoxDistY;
    end;
    'small': begin
      X := sPuzzleX1 - 5;
      Y := sPuzzleY1 - 5;
      DX := sBoxDistX;
      DY := sBoxDistY;
    end;
  end;
  //
  for N := 0 to High(RunesBMP) do
  begin
    if FindBitmapsSpiralTolerance(RunesBMP[N], X, Y, TPA, X, Y, X + G * DX, Y + G * DY, 15) then
    begin
      for K := 0 to High(TPA) do
      begin
        TP := TPA[K];
        for C := 1 to G do
        begin
           for R := 1 to G do
           begin
              if PointInBox(TP, IntToBox(X, Y, X + C * DX, Y + R * DY)) then
              begin
                Puzzles[R - 1][C - 1] := N + 1;
                R := G;
                C := G;
              end;
           end;
        end;
      end;
    end;
  end;
  Debug('Finished getting runes position');
  result := Puzzles;
end;

procedure RemovePossibleValues(R, C, V: Integer);
var
  A, B: Integer;
begin
  case R Of
    0, 1, 2: begin
      case C Of
        0, 1, 2: begin
          for A := 0 to 2 do
            for B := 0 to 2 do
              if Not (PossibleValues[A][B][0] = 0) then
                RemoveElement(PossibleValues[A][B], V);
        end;
        3, 4, 5: begin
          for A := 0 to 2 do
            for B := 3 to 5 do
              if Not (PossibleValues[A][B][0] = 0) then
                RemoveElement(PossibleValues[A][B], V);
        end;
        6, 7, 8: begin
          for A := 0 to 2 do
            for B := 6 to 8 do
              if Not (PossibleValues[A][B][0] = 0) then
                RemoveElement(PossibleValues[A][B], V);
        end;
      end;
    end;
    3, 4, 5: begin
      case C Of
        0, 1, 2: begin
          for A := 3 to 5 do
            for B := 0 to 2 do
              if Not (PossibleValues[A][B][0] = 0) then
                RemoveElement(PossibleValues[A][B], V);
        end;
        3, 4, 5: begin
          for A := 3 to 5 do
            for B := 3 to 5 do
              if Not (PossibleValues[A][B][0] = 0) then
                RemoveElement(PossibleValues[A][B], V);
        end;
        6, 7, 8: begin
          for A := 3 to 5 do
            for B := 6 to 8 do
              if Not (PossibleValues[A][B][0] = 0) then
                RemoveElement(PossibleValues[A][B], V);
        end;
      end;
    end;
    6, 7, 8: begin
      case C Of
        0, 1, 2: begin
          for A := 6 to 8 do
            for B := 0 to 2 do
              if Not (PossibleValues[A][B][0] = 0) then
                RemoveElement(PossibleValues[A][B], V);
        end;
        3, 4, 5: begin
          for A := 6 to 8 do
            for B := 3 to 5 do
              if Not (PossibleValues[A][B][0] = 0) then
                RemoveElement(PossibleValues[A][B], V);
        end;
        6, 7, 8: begin
          for A := 6 to 8 do
            for B := 6 to 8 do
              if Not (PossibleValues[A][B][0] = 0) then
                RemoveElement(PossibleValues[A][B], V);
        end;
      end;
    end;
  end;
end;

function Contain(A: TIntegerArray; V: Integer): Boolean;
var
  N: Integer;
begin
  for N := 0 to High(A) do
    if A[N] = V then
    begin
      result := True;
      Exit;
    end;
end;

procedure SinglePosition(R, C: Integer);
var
  A: Integer;
begin
  for A := 0 to 8 do
    if Not (Puzzle[A][C] = 0) then
      RemoveElement(PossibleValues[R][C], Puzzle[A][C]);

  for A := 0 to 8 do
    if Not (Puzzle[R][A] = 0) then
      RemoveElement(PossibleValues[R][C], Puzzle[R][A]);
end;

procedure CandidateLines(Box: Integer);
var
  A, B, N, N2, N3, N4, Count, XR, YR, H: Integer;
  CTP: TPointArray;
  BoxX, BoxY: TIntegerArray;
  AlreadySolved: Boolean;
begin
  SetLength(CTP, 9);
  for N4 := 0 to 8 do
    CTP[N4] := IntToPoint(-1, -1);
  SetLength(BoxX, 3);
  SetLength(BoxY, 3);
  case Box Of
    0: begin
      BoxX := [0, 1, 2];
      BoxY := [0, 1, 2];
    end;
    1: begin
      BoxX := [0, 1, 2];
      BoxY := [3, 4, 5];
    end;
    2: begin
      BoxX := [0, 1, 2];
      BoxY := [6, 7, 8];
    end;
    3: begin
      BoxX := [3, 4, 5];
      BoxY := [0, 1, 2];
    end;
    4: begin
      BoxX := [3, 4, 5];
      BoxY := [3, 4, 5];
    end;
    5: begin
      BoxX := [3, 4, 5];
      BoxY := [6, 7, 8];
    end;
    6: begin
      BoxX := [6, 7, 8];
      BoxY := [0, 1, 2];
    end;
    7: begin
      BoxX := [6, 7, 8];
      BoxY := [3, 4, 5];
    end;
    8: begin
      BoxX := [6, 7, 8];
      BoxY := [6, 7, 8];
    end;
  end;

  for N := 1 to 9 do
  begin
    AlreadySolved := false;
    for A := BoxX[0] to BoxX[2] do
      for B := BoxY[0] to BoxY[2] do
        if Puzzle[A][B] = N then AlreadySolved := True;

    if Not AlreadySolved then
    begin
      Count := 0;
      SetLength(CTP, 9);
      for N4 := 0 to 8 do
        CTP[N4] := IntToPoint(-1, -1);
      for A := BoxX[0] to BoxX[2] do
      begin
        for B := BoxY[0] to BoxY[2] do
        begin
          if (Contain(PossibleValues[A][B], N)) then
          begin
            CTP[Count] := IntToPoint(A, B);
            Count := Count + 1;
          end;
        end;
      end;
      if Count > 0 then SetLength(CTP, Count);
      if ((Count = 2) Or (Count = 3)) then
      begin
        H := High(CTP);
        XR := CTP[0].X;
        YR := CTP[0].Y;
        for N2 := 1 to H do
        begin
          if Not (XR = CTP[N2].X) then Break;
          if ((N2 = H) And (XR = CTP[H].X)) then
          begin
            for N3 := 0 to 8 do
            begin
              if Contain(BoxY, N3) then Continue;
              RemoveElement(PossibleValues[XR][N3], N);
            end;
          end;
        end;
        for N2 := 1 to H do
        begin
          if Not (YR = CTP[N2].Y) then Break;
          if ((N2 = H) And (YR = CTP[H].Y)) then
          begin
            for N3 := 0 to 8 do
            begin
              if Contain(BoxX, N3) then Continue;
              RemoveElement(PossibleValues[N3][YR], N);
            end;
          end;
        end;
      end;
    end;
  end;
end;

function SolveSudoku: Boolean;
var
  N, R, C, B, T: Integer;
  Done: Boolean;
begin
  if Not (LoggedIn And SudokuScreen) then Exit;
  T := GetSystemTime;

  case LowerCase(PuzzleSizeS) Of
    'small': begin
      smallOrder := GetRunes();
      Debug(toStr(smallOrder));

      if Not (smallOrder[1][1] = 0) then
      begin
        smallOrder[0][0] := smallOrder[2][2];
        smallOrder[0][1] := smallOrder[1][2];
        smallOrder[0][2] := smallOrder[1][1];
        smallOrder[0][3] := smallOrder[2][1];
        smallOrder[1][0] := smallOrder[2][1];
        smallOrder[1][3] := smallOrder[2][2];
        smallOrder[2][0] := smallOrder[1][1];
        smallOrder[2][3] := smallOrder[1][2];
        smallOrder[3][0] := smallOrder[1][2];
        smallOrder[3][1] := smallOrder[2][2];
        smallOrder[3][2] := smallOrder[2][1];
        smallOrder[3][3] := smallOrder[1][1];
      end else if Not (smallOrder[1][0] = 0) then
      begin
        smallOrder[0][0] := smallOrder[1][3];
        smallOrder[0][1] := smallOrder[2][3];
        smallOrder[0][2] := smallOrder[2][0];
        smallOrder[0][3] := smallOrder[1][0];
        smallOrder[1][1] := smallOrder[2][0];
        smallOrder[1][2] := smallOrder[2][3];
        smallOrder[2][1] := smallOrder[1][0];
        smallOrder[2][2] := smallOrder[1][3];
        smallOrder[3][0] := smallOrder[2][3];
        smallOrder[3][1] := smallOrder[1][3];
        smallOrder[3][2] := smallOrder[1][0];
        smallOrder[3][3] := smallOrder[2][0];
      end else if Not (smallOrder[0][0] = 0) then
      begin
        smallOrder[0][1] := smallOrder[3][0];
        smallOrder[0][2] := smallOrder[3][3];
        smallOrder[1][0] := smallOrder[0][3];
        smallOrder[1][1] := smallOrder[3][3];
        smallOrder[1][2] := smallOrder[3][0];
        smallOrder[1][3] := smallOrder[0][0];
        smallOrder[2][0] := smallOrder[3][3];
        smallOrder[2][1] := smallOrder[0][3];
        smallOrder[2][2] := smallOrder[0][0];
        smallOrder[2][3] := smallOrder[3][0];
        smallOrder[3][1] := smallOrder[0][0];
        smallOrder[3][2] := smallOrder[0][3];
      end else
        Exit;

      Done := True;
      for R := 0 to 3 do
        for C := 0 to 3 do
          if smallOrder[R][C] = 0 then Done := false;
    end;
    'large': begin
      Puzzle := GetRunes;
      Debug(toStr(Puzzle));

      for R := 0 to 8 do
        for C := 0 to 8 do
          if Puzzle[R][C] = 0 then PossibleValues[R][C] := [1, 2, 3, 4, 5, 6, 7, 8, 9]
          else begin
            SetLength(PossibleValues[R][C], 1);
            PossibleValues[R][C] := [0];
          end;

      for N := 0 to 19 do
      begin
        for R := 0 to 8 do
          for C := 0 to 8 do
            if Not (Puzzle[R][C] = 0) then
              RemovePossibleValues(R, C, Puzzle[R][C]);

        for R := 0 to 8 do
          for C := 0 to 8 do
            if ((Not Contain(PossibleValues[R][C], 0)) And (Length(PossibleValues[R][C]) = 1)) then
            begin
              Puzzle[R][C] := PossibleValues[R][C][0];
              SetLength(PossibleValues[R][C], 1);
              PossibleValues[R][C] := [0];
            end;

        {for R := 0 to 8 do
          Writeln(Puzzle[S]);
        Writeln('Square');
        for R := 0 to 8 do
          Writeln(PossibleValues[S]);
        Writeln('***********');  }

        for R := 0 to 8 do
          for C := 0 to 8 do
            if (Puzzle[R][C] = 0) then
              SinglePosition(R, C);

        for R := 0 to 8 do
          for C := 0 to 8 do
            if ((Not Contain(PossibleValues[R][C], 0)) And (Length(PossibleValues[R][C]) = 1)) then
            begin
              Puzzle[R][C] := PossibleValues[R][C][0];
              SetLength(PossibleValues[R][C], 1);
              PossibleValues[R][C] := [0];
            end;

       { for R := 0 to 8 do
          Writeln(Puzzle[S]);
        Writeln('Single Line');
        for R := 0 to 8 do
          Writeln(PossibleValues[S]);
        Writeln('***********');    }

        for B := 0 to 8 do
          CandidateLines(B);

        for R := 0 to 8 do
          for C := 0 to 8 do
            if ((Not Contain(PossibleValues[R][C], 0)) And (Length(PossibleValues[R][C]) = 1)) then
            begin
              Puzzle[R][C] := PossibleValues[R][C][0];
              SetLength(PossibleValues[R][C], 1);
              PossibleValues[R][C] := [0];
            end;

        {for R := 0 to 8 do
          Writeln(Puzzle[S]);
        Writeln('Candidate');
        for R := 0 to 8 do
          Writeln(PossibleValues[S]);}

        {for R := 0 to 8 do
          for C := 0 to 8 do
            Writeln(PossibleValues[R][C]);

        Writeln('---------------------'); }

        Done := True;
        for R := 0 to 8 do
          for C := 0 to 8 do
            if Puzzle[R][C] = 0 then Done := false;

        if Done then Break;
      end;
    end;
    else
      EndScript('Wrong size of puzzle entered');
  end;
  Debug('Completed Solve ' + toStr(result) + ' in ' + IntToStr(GetSystemTime - T) + ' milliseconds.');
  if Done then result := True;
end;

function PlaceRunes: Boolean;
var
  N, A, B, T, X, Y: Integer;
  BRune: TPointArray;
begin
  if Not (LoggedIn And SudokuScreen) then Exit;
  Debug('Placing runes into puzzle');

  case LowerCase(PuzzleSizeS) Of
    'small': begin
      SetLength(Brune, 5);
      T := GetSystemTime + RandomRange(30000, 45000);

      Brune[1] := IntToPoint(31, 309);
      Brune[2] := IntToPoint(88, 309);
      Brune[3] := IntToPoint(141, 308);
      Brune[4] := IntToPoint(196, 309);

      for N := 1 to 4 do
      begin
        if GetSystemTime > T then Exit;
        Mose(BRune[N].X, BRune[N].Y, 5, 5, True);
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
        for A := 0 to 3 do
          for B := 0 to 3 do
            if smallOrder[A][B] = N then
            begin
              X := 164 + B * 52 + 16;
              Y := 57 + A * 52 + 16;
              if Not((CountColorTolerance(C_YELLOWBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 300) or
                     (CountColorTolerance(C_ORANGEBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 300)) then Continue;
              Mose(X, Y, 5, 5, True);
              Wat(W1, Round(Multi * W1));
            end;
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
      end;
      Wat(250, 350);
      result := True;
    end;
    'large': begin
      SetLength(BRune, 10);
      T := GetSystemTime + RandomRange(75000, 120000);

      Brune[1] := IntToPoint(30, 112);
      Brune[2] := IntToPoint(30, 162);
      Brune[3] := IntToPoint(30, 212);
      Brune[4] := IntToPoint(30, 262);
      Brune[5] := IntToPoint(30, 312);
      Brune[6] := IntToPoint(80, 162);
      Brune[7] := IntToPoint(80, 212);
      Brune[8] := IntToPoint(80, 262);
      Brune[9] := IntToPoint(80, 312);

      for N := 1 to 9 do
      begin
        if GetSystemTime > T then Exit;
        Mose(BRune[N].X, BRune[N].Y, 5, 5, True);
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
        for A := 0 to 8 do
          for B := 0 to 8 do
            if (Puzzle[A][B] = N) then
            begin
              X := 118 + B * 37 + 15;
              Y := 8 + A * 37 + 15;
              if Not((CountColorTolerance(C_YELLOWBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 400) or
                     (CountColorTolerance(C_ORANGEBLOCK, X - 15, Y - 15, X + 16, Y + 16, 5) > 400)) then Continue;
              Mose(X, Y, 5, 5, True);
              Wat(W1, Round(Multi * W1));
            end;
        Wat(Round(0.5 * W2), Round(Multi * 0.5 * W2));
      end;
      Wat(250, 350);
      result := True;
    end;
    else
      EndScript('Wrong Size Puzzle Specified');
  end;

  if result then
  begin
    Debug('Solved ' + UpperCase(PuzzleSizeS) + ' Puzzle Correctly. Opening Casket.');
    OpenCasket;
  end;

  T := GetSystemTime + 5500;
  repeat
    Wat(10, 25);
    if GetSystemTime > T then
    begin
      result := false;
      ClosePuzzle;
      Exit;
    end;
  until Not SudokuScreen
end;

function CollectRunes: Boolean;
var
  N, T, D, Q: Integer;
  TPA: TPointArray;
  TP: TPoint;
begin
  if Not LoggedIn then Exit;
  Debug('Collecting Runes');
  //
  T := GetSystemTime + RandomRange(3500, 5000);
  repeat
    Wat(5, 10);
    if GetSystemTime > T then Exit;
  until FindNPCChatTextMulti(['Find out', 'ind', 'out', 'at'], ClickLeft);
  //
  T := GetSystemTime + RandomRange(3500, 5000);
  repeat
    Wat(5, 10);
    if GetSystemTime > T then Exit;
  until StoreScreen;
  //
  T := GetSystemTime + RandomRange(60000, 65000);
  for N := 0 to High(ShopRunesBMP) do
  begin
    if FindBitmapsSpiralTolerance(ShopRunesBMP[N], MSX1, MSY1, TPA, MSX1 + 30, MSY1 + 30, MSX2 - 30, MSY2 - 30, 10) then
    begin
       //
       TP := MiddleTPA(TPA);
       Q := StoreQuantity(TP);
       Debug('We can buy ' + toStr(Q) + ' ' + Runes[N] + ' rune from store now');
       MMose(TP.X, TP.Y, 2, 2);
       Wat(50, 100);
       if WaitUpTextMulti(['Value', 'alue', 'lue'], 1500) then
       begin
         repeat
           if GetSystemTime > T then Exit;
           //
           if InChat('enough') then EndScript('Ran out of money');
           if PinScreen then InPin(Players[0].PIN);
           //
           Mose(TP.X, TP.Y, 2, 2, false);
           Wat(50, 100);
           WaitOption(toStr(Q_STORE_BUY), 500);
           Q := Q - Q_STORE_BUY;
         until 1 > Q;
       end;
    end;
  end;

  CloseStore;

  Debug('Finished Collecting Runes ...');

  result := True;
  if result then
    Debug('Bought runes')
  else
    Debug('Couldnt buy runes');
end;

procedure VariableReset;
var
  A, B: Integer;
begin
  Solved := false;
  SetLength(Puzzle, 9);
  for A := 0 to 8 do
    SetLength(Puzzle[A], 9);

  SetLength(PossibleValues, 9);
  for A := 0 to 8 do
  begin
    SetLength(PossibleValues[A], 9);
    for B := 0 to 8 do
      SetLength(PossibleValues[A][B], 9);
  end;
end;

procedure SetVariables;
var
  A, B: Integer;
begin
  TimeToBreak := GetSystemTime + (330 * 60 * 1000) + RandomRange((-5 * 60 * 1000), (5 * 60 * 1000));
  StartTime := GetSystemTime;

  Solved := false;
  InitlizedRuneBMPs := false;

  BoxDistX := 37;
  BoxDistY := 37;
  sBoxDistX := 51;
  sBoxDistY := 52;

  PuzzleX1 := 118;
  PuzzleY1 := 8;
  sPuzzleX1 := 164;
  sPuzzleY1 := 57;

  case LowerCase(PuzzleSize) Of
    'large': begin
      PuzzleSizeS := 'large';
      Runes := RUNES_LARGE;
      ShopRunes := SHOP_RUNES_LARGE;
      SetLength(Puzzle, 9);
      for A := 0 to 8 do
        SetLength(Puzzle[A], 9);

      SetLength(PossibleValues, 9);
      for A := 0 to 8 do
      begin
        SetLength(PossibleValues[A], 9);
        for B := 0 to 8 do
          SetLength(PossibleValues[A][B], 9);
      end;
    end;
    'small': begin
      PuzzleSizeS := 'small';
      Runes := RUNES_SMALL;
      ShopRunes := SHOP_RUNES_SMALL;
      SetLength(smallOrder, 4);
      for A := 0 to 3 do
        SetLength(smallOrder[A], 4);
    end;
    else EndScript('Puzzle size entered incorrectly');
  end;

  AddOnTerminate('FreeRuneBMPs');
end;

procedure ScriptSetup;
begin
  SetupSRL;
  DeclarePlayers;
  MouseSpeed := S_MouseSpeed;
end;

begin
  ClearDebug;
  ScriptSetup;
  SetVariables;

  if (not LogMeIn) then EndScript('Could not login pre-loop');
  repeat
    if (not LogMeIn) then EndScript('Could not login in-loop');

    if TakeBreakMode And BreakTime then TakeBreak;

    if PopUps then Wat(500, 750);

    VariableReset;

    if TalkToAli then
    begin
      if SolveSudoku then
      begin
        if PlaceRunes then
        begin
          if CollectRunes then
          begin
            Solved := True;
          end else begin
            Solved := false;
            FailCount(false, 'Could not collect runes');
          end;
        end else begin
          FailCount(false, 'Could not place runes');
        end;
      end else begin
        FailCount(false, 'Could not solve the puzzle');
      end;
    end else begin
      FailCount(false, 'Could not talk to Ali');
    end;

    if Solved then
    begin
      FailCount(True, '');
      PuzzlesSolved := PuzzlesSolved + 1;
      Report;
      SwichWorld;
    end else begin
      ClosePuzzle;
      CloseStore;
      Debug('Current FailCount: ' + F_String);
    end;
  until false;
  terminateScript;
end.
